syntax = "proto3";

package bloock;

option go_package = "github.com/bloock/bloock-sdk-go/v2/internal/bridge/proto";
option java_package = "com.bloock.sdk.bridge.proto";

import "bloock_config.proto";
import "bloock_shared.proto";
import "bloock_identity_entities.proto";
import "bloock_keys_entities.proto";

service IdentityService {
  rpc CreateHolder(CreateHolderRequest) returns (CreateHolderResponse);
  rpc CreateIssuer(CreateIssuerRequest) returns (CreateIssuerResponse);
  rpc ImportIssuer(ImportIssuerRequest) returns (ImportIssuerResponse);

  rpc BuildSchema(BuildSchemaRequest) returns (BuildSchemaResponse);
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);

  rpc CreateCredential(CreateCredentialRequest)
      returns (CreateCredentialResponse);
  rpc GetCredential(GetCredentialRequest) returns (GetCredentialResponse);
  rpc GetCredentialProof(GetCredentialProofRequest)
      returns (GetCredentialProofResponse);
  rpc RevokeCredential(RevokeCredentialRequest)
      returns (RevokeCredentialResponse);

  rpc CredentialToJson(CredentialToJsonRequest)
      returns (CredentialToJsonResponse);
  rpc CredentialFromJson(CredentialFromJsonRequest)
      returns (CredentialFromJsonResponse);

  rpc GetCredentialOffer(GetCredentialOfferRequest)
      returns (GetCredentialOfferResponse);

  rpc ForcePublishIssuerState(ForcePublishIssuerStateRequest)
      returns (ForcePublishIssuerStateResponse);

  rpc CreateVerification(CreateVerificationRequest)
      returns (CreateVerificationResponse);
  rpc WaitVerification(WaitVerificationRequest)
      returns (WaitVerificationResponse);
  rpc GetVerificationStatus(GetVerificationStatusRequest)
      returns (GetVerificationStatusResponse);
}

message GetSchemaRequest {
  ConfigData config_data = 1;
  string id = 2;
}

message GetSchemaResponse {
  Schema schema = 1;
  optional Error error = 2;
}

message ImportIssuerResponse {
  string did = 1;
  optional Error error = 2;
}

message GetCredentialProofRequest {
  ConfigData config_data = 1;
  string issuer_did = 2;
  string credential_id = 3;
}

message GetCredentialProofResponse {
  CredentialProof proof = 1;
  optional Error error = 2;
}

message CredentialToJsonRequest {
  ConfigData config_data = 1;
  Credential credential = 2;
}

message CredentialToJsonResponse {
  string json = 1;
  optional Error error = 2;
}

message CredentialFromJsonRequest {
  ConfigData config_data = 1;
  string json = 2;
}

message CredentialFromJsonResponse {
  Credential credential = 1;
  optional Error error = 2;
}

message CreateCredentialRequest {
  ConfigData config_data = 1;
  string schema_id = 2;
  string holder_did = 3;
  int64 expiration = 4;
  optional int32 version = 5;
  Key key = 6;
  repeated StringAttribute string_attributes = 7;
  repeated IntegerAttribute integer_attributes = 8;
  repeated DecimalAttribute decimal_attributes = 9;
  repeated BooleanAttribute boolean_attributes = 10;
  repeated DateAttribute date_attributes = 11;
  repeated DateTimeAttribute datetime_attributes = 12;
}

message BuildSchemaRequest {
  ConfigData config_data = 1;
  string display_name = 2;
  string schema_type = 3;
  string version = 4;
  string description = 5;
  repeated StringAttributeDefinition string_attributes = 6;
  repeated IntegerAttributeDefinition integer_attributes = 7;
  repeated DecimalAttributeDefinition decimal_attributes = 8;
  repeated BooleanAttributeDefinition boolean_attributes = 9;
  repeated DateAttributeDefinition date_attributes = 10;
  repeated DateTimeAttributeDefinition datetime_attributes = 11;
  repeated StringEnumAttributeDefinition string_enum_attributes = 12;
  repeated IntegerEnumAttributeDefinition integer_enum_attributes = 13;
  repeated DecimalEnumAttributeDefinition decimal_enum_attributes = 14;
}

message CreateHolderRequest {
  Key key = 1;
  ConfigData config_data = 2;
  DidMethod did_method = 3;
}

message CreateIssuerRequest {
  Key key = 1;
  ConfigData config_data = 2;
  DidMethod did_method = 3;
  optional string name = 4;
  optional string description = 5;
  optional string image = 6;
  PublishInterval publish_interval = 7;
}

message ImportIssuerRequest {
  Key key = 1;
  ConfigData config_data = 2;
  DidMethod did_method = 3;
}

message ForcePublishIssuerStateRequest {
  ConfigData config_data = 1;
  string issuer_did = 2;
  Key key = 3;
}

message CreateCredentialResponse {
  CredentialReceipt credential_receipt = 1;
  optional Error error = 2;
}

message CreateHolderResponse {
  string did = 1;
  optional Error error = 2;
}

message CreateIssuerResponse {
  string did = 1;
  optional Error error = 2;
}

message BuildSchemaResponse {
  Schema schema = 1;
  optional Error error = 2;
}

message ForcePublishIssuerStateResponse {
  IssuerStateReceipt state_receipt = 1;
  optional Error error = 2;
}

message RevokeCredentialRequest {
  ConfigData config_data = 1;
  Credential credential = 2;
  Key key = 3;
}

message RevokeCredentialResponse {
  CredentialRevocation result = 1;
  optional Error error = 2;
}

message CreateVerificationRequest {
  ConfigData config_data = 1;
  string proof_request = 2;
}

message CreateVerificationResponse {
  VerificationReceipt result = 1;
  optional Error error = 2;
}

message WaitVerificationRequest {
  ConfigData config_data = 1;
  int64 session_id = 2;
  int64 timeout = 3;
}

message WaitVerificationResponse {
  bool status = 1;
  optional Error error = 2;
}

message GetVerificationStatusRequest {
  ConfigData config_data = 1;
  int64 session_id = 2;
}

message GetVerificationStatusResponse {
  bool status = 1;
  optional Error error = 2;
}

message GetCredentialRequest {
  ConfigData config_data = 1;
  string credential_id = 2;
}

message GetCredentialResponse {
  Credential credential = 1;
  optional Error error = 2;
}

message GetCredentialOfferRequest {
  ConfigData config_data = 1;
  string credential_id = 2;
  Key key = 3;
}

message GetCredentialOfferResponse {
  string credential_offer = 1;
  optional Error error = 2;
}