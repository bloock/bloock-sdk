syntax = "proto3";

package bloock;

option go_package = "github.com/bloock/bloock-sdk-go/v2/internal/bridge/proto";
option java_package = "com.bloock.sdk.bridge.proto";

import "config.proto";
import "authenticity_entities.proto";
import "shared.proto";
import "identity_entities_v2.proto";

service IdentityServiceV2 {
    rpc CreateIdentity(CreateIdentityV2Request) returns (CreateIdentityV2Response);
    rpc CreateIssuer(CreateIssuerRequest) returns (CreateIssuerResponse);
    rpc GetIssuerList(GetIssuerListRequest) returns (GetIssuerListResponse);
    rpc GetIssuerByKey(GetIssuerByKeyRequest) returns (GetIssuerByKeyResponse);

    rpc BuildSchema(BuildSchemaRequestV2) returns (BuildSchemaResponseV2);
    rpc GetSchema(GetSchemaRequestV2) returns (GetSchemaResponseV2);

    rpc CreateCredential(CreateCredentialRequestV2) returns (CreateCredentialResponseV2);
    rpc GetCredentialProof(GetCredentialProofRequest) returns (GetCredentialProofResponse);
    rpc RevokeCredential(RevokeCredentialRequestV2) returns (RevokeCredentialResponseV2);

    rpc CredentialToJson(CredentialToJsonRequestV2) returns (CredentialToJsonResponseV2);
    rpc CredentialFromJson(CredentialFromJsonRequestV2) returns (CredentialFromJsonResponseV2);

    rpc PublishIssuerState(PublishIssuerStateRequest) returns (PublishIssuerStateResponse);

    rpc CreateVerification(CreateVerificationRequest) returns (CreateVerificationResponse);
    rpc WaitVerification(WaitVerificationRequest) returns (WaitVerificationResponse);
    rpc GetVerificationStatus(GetVerificationStatusRequest) returns (GetVerificationStatusResponse);
}

message GetSchemaRequestV2 {
    ConfigData config_data = 1;
    string id = 2;
}

message GetSchemaResponseV2 {
    SchemaV2 schema = 1;
    optional Error error = 2;
}

message GetIssuerListRequest {
    ConfigData config_data = 1;
}

message GetIssuerListResponse {
    repeated string did = 1;
    optional Error error = 2;
}

message GetIssuerByKeyResponse {
    string did = 1;
    optional Error error = 2;
}

message GetCredentialProofRequest {
    ConfigData config_data = 1;
    string issuer_did = 2;
    string credential_id = 3;
}

message GetCredentialProofResponse {
    CredentialProofV2 proof = 1;
    optional Error error = 2;
}

message CredentialToJsonRequestV2 {
    ConfigData config_data = 1;
    CredentialV2 credential = 2;
}

message CredentialToJsonResponseV2 {
    string json = 1;
    optional Error error = 2;
}

message CredentialFromJsonRequestV2 {
    ConfigData config_data = 1;
    string json = 2;
}

message CredentialFromJsonResponseV2 {
    CredentialV2 credential = 1;
    optional Error error = 2;
}

message CreateCredentialRequestV2 {
    ConfigData config_data = 1;
    string schema_id = 2;
    string issuer_did = 3;
    string holder_did = 4;
    int64 expiration = 5;
    optional int32 version = 6;
    Signer signer = 7;
    repeated StringAttributeV2 string_attributes = 8;
    repeated IntegerAttributeV2 integer_attributes = 9;
    repeated DecimalAttributeV2 decimal_attributes = 10;
    repeated BooleanAttributeV2 boolean_attributes = 11;
    repeated DateAttributeV2 date_attributes = 12;
    repeated DateTimeAttributeV2 datetime_attributes = 13;
}

message BuildSchemaRequestV2 {
    ConfigData config_data = 1;
    string display_name = 2;
    string schema_type = 3;
    string version = 4;
    string description = 5;
    string issuer_did = 6;
    repeated StringAttributeDefinitionV2 string_attributes = 7;
    repeated IntegerAttributeDefinitionV2 integer_attributes = 8;
    repeated DecimalAttributeDefinitionV2 decimal_attributes = 9;
    repeated BooleanAttributeDefinitionV2 boolean_attributes = 10;
    repeated DateAttributeDefinitionV2 date_attributes = 11;
    repeated DateTimeAttributeDefinitionV2 datetime_attributes = 12;
    repeated StringEnumAttributeDefinitionV2 string_enum_attributes = 13;
    repeated IntegerEnumAttributeDefinitionV2 integer_enum_attributes = 14;
    repeated DecimalEnumAttributeDefinitionV2 decimal_enum_attributes = 15;
}

message CreateIdentityV2Request {
    IdentityKey issuer_key = 1;
    ConfigData config_data = 2;
    optional DidParams did_params = 3;
}

message CreateIssuerRequest {
    IdentityKey issuer_key = 1;
    ConfigData config_data = 2;
    optional DidParams issuer_params = 3;
    optional string name = 4;
    optional string description = 5;
    optional string image = 6;
    optional int64 publish_interval = 7;
}

message GetIssuerByKeyRequest {
    IdentityKey issuer_key = 1;
    ConfigData config_data = 2;
    optional DidParams issuer_params = 3;
}

message PublishIssuerStateRequest {
    ConfigData config_data = 1;
    string issuer_did = 2;
    Signer signer = 3;
}

message CreateCredentialResponseV2 {
    CredentialReceiptV2 credential_receipt = 1;
    optional Error error = 2;
}

message CreateIdentityV2Response {
    string did = 1;
    optional Error error = 2;
}

message CreateIssuerResponse {
    string did = 1;
    optional Error error = 2;
}

message BuildSchemaResponseV2 {
    SchemaV2 schema = 1;
    optional Error error = 2;
}

message PublishIssuerStateResponse {
    IssuerStateReceipt state_receipt = 1;
    optional Error error = 2;
}

message RevokeCredentialRequestV2 {
    ConfigData config_data = 1;
    CredentialV2 credential = 2;
    Signer signer = 3;
}

message RevokeCredentialResponseV2 {
    CredentialRevocationV2 result = 1;
    optional Error error = 2;
}

message CreateVerificationRequest {
    ConfigData config_data = 1;
    string proof_request = 2;
}

message CreateVerificationResponse {
    VerificationReceipt result = 1;
    optional Error error = 2;
}

message WaitVerificationRequest {
    ConfigData config_data = 1;
    int64 session_id = 2;
    int64 timeout = 3;
}

message WaitVerificationResponse {
    bool status = 1;
    optional Error error = 2;
}

message GetVerificationStatusRequest {
    ConfigData config_data = 1;
    int64 session_id = 2;
}

message GetVerificationStatusResponse {
    bool status = 1;
    optional Error error = 2;
}
