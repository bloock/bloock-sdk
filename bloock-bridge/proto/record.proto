syntax = "proto3";

package bloock;

option go_package = "github.com/bloock/bloock-sdk-go/v2/internal/bridge/proto";
option java_package = "bloock.sdk.java.bridge.proto";

import "bloock.proto";
import "config.proto";
import "proof.proto";

enum RecordTypes {
	STRING = 0;
	HEX = 1;
	JSON = 2;
	BYTES = 3;
	FILE = 4;
    RECORD = 5;
}

service RecordService {
    rpc SendRecords(SendRecordsRequest) returns (SendRecordsResponse);
    rpc BuildRecordFromString(RecordBuilderFromStringRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromHex(RecordBuilderFromHexRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromJson(RecordBuilderFromJSONRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromFile(RecordBuilderFromFileRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromBytes(RecordBuilderFromBytesRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromRecord(RecordBuilderFromRecordRequest) returns (RecordBuilderResponse);
    rpc GetHash(Record) returns (RecordHash);
    rpc GenerateKeys(GenerateKeysRequest) returns (GenerateKeysResponse);
}

message GenerateKeysRequest {}

message GenerateKeysResponse {
    string privateKey = 1;
    string publicKey = 2;
    optional Error error = 3;
}

message RecordHash {
  string hash = 1;
  optional Error error = 2;
}

message RecordHeader {
    string ty = 1;
}

message Record {
    RecordHeader headers = 1;
    bytes payload = 2;
    repeated Signature signatures = 3;
    optional Encryption encryption = 4;
    optional Proof proof = 5; 
}

enum SignerAlg {
    ES256K = 0;
}

enum EncrypterAlg {
    A256GCM = 0;
}

message Signer {
    SignerAlg alg = 1;
    SignerArgs args = 2;
}

message SignerArgs {
    optional string private_key = 1;
}

message Encrypter {
    EncrypterAlg alg = 1;
    EncrypterArgs args = 2;
}

message EncrypterArgs {
    optional string secret = 1;
}

message Signature {
    string signature = 1;
    string protected = 2;
    SignatureHeader header = 3;
}

message SignatureHeader {
    string alg = 1;
    string kid = 2;
}

message Encryption {
    EncryptionHeader header = 1;
    string protected = 2;
}

message EncryptionHeader {
    string alg = 1;
}

message RecordReceipt {
    int64 anchor = 1;
    string client = 2;
    string record = 3;
    string status = 4;
}

message RecordBuilderFromStringRequest {
    string payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
}

message RecordBuilderFromHexRequest {
    string payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
}

message RecordBuilderFromJSONRequest {
    string payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
}

message RecordBuilderFromBytesRequest {
    bytes payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
}

message RecordBuilderFromFileRequest {
    bytes payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
}

message RecordBuilderFromRecordRequest {
    Record payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
}

message RecordBuilderResponse {
    Record record = 1;
    optional Error error = 2;
}

message SendRecordsRequest {
    ConfigData config_data = 1;
    repeated string records = 2;
}

message SendRecordsResponse {
    repeated RecordReceipt records = 1;
    optional Error error = 2;
}
