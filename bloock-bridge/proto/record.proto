syntax = "proto3";

package bloock;

option go_package = "github.com/bloock/bloock-sdk-go/v2/internal/bridge/proto";
option java_package = "com.bloock.sdk.bridge.proto";

import "shared.proto";
import "config.proto";

enum RecordTypes {
	STRING = 0;
	HEX = 1;
	JSON = 2;
	BYTES = 3;
	FILE = 4;
    RECORD = 5;
    LOADER = 6;
}

service RecordService {
    rpc SendRecords(SendRecordsRequest) returns (SendRecordsResponse);
    rpc BuildRecordFromString(RecordBuilderFromStringRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromHex(RecordBuilderFromHexRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromJson(RecordBuilderFromJSONRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromFile(RecordBuilderFromFileRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromBytes(RecordBuilderFromBytesRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromRecord(RecordBuilderFromRecordRequest) returns (RecordBuilderResponse);
    rpc BuildRecordFromLoader(RecordBuilderFromLoaderRequest) returns (RecordBuilderResponse);
    rpc GetHash(Record) returns (RecordHash);
    rpc GetSignatures(Record) returns (RecordSignatures);
    rpc GenerateKeys(GenerateKeysRequest) returns (GenerateKeysResponse);
    rpc GenerateRsaKeyPair(GenerateRsaKeyPairRequest) returns (GenerateRsaKeyPairResponse);
    rpc Publish(PublishRequest) returns (PublishResponse);
}

message GenerateKeysRequest {}

message GenerateKeysResponse {
    string privateKey = 1;
    string publicKey = 2;
    optional Error error = 3;
}

message GenerateRsaKeyPairRequest {}

message GenerateRsaKeyPairResponse {
    string privateKey = 1;
    string publicKey = 2;
    optional Error error = 3;
}

message RecordHash {
    string hash = 1;
    optional Error error = 2;
}

message RecordSignatures {
    repeated Signature signatures = 1;
    optional Error error = 2;
}

message RecordHeader {
    string ty = 1;
}

message Record {
    bytes payload = 2;
}

enum SignerAlg {
    ES256K = 0;
}

enum EncryptionAlg {
    A256GCM = 0;
    RSA = 1;
}

message Signer {
    SignerAlg alg = 1;
    SignerArgs args = 2;
}

message SignerArgs {
    optional string private_key = 1;
}

message Encrypter {
    EncryptionAlg alg = 1;
    EncrypterArgs args = 2;
}

message EncrypterArgs {
    string key = 1;
}

message Decrypter {
    EncryptionAlg alg = 1;
    DecrypterArgs args = 2;
}

message DecrypterArgs {
    string key = 1;
}

message Signature {
    string signature = 1;
    string protected = 2;
    SignatureHeader header = 3;
}

message SignatureHeader {
    string alg = 1;
    string kid = 2;
}

message RecordReceipt {
    int64 anchor = 1;
    string client = 2;
    string record = 3;
    string status = 4;
}

message RecordBuilderFromStringRequest {
    string payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
    optional Decrypter decrypter = 4;
}

message RecordBuilderFromHexRequest {
    string payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
    optional Decrypter decrypter = 4;
}

message RecordBuilderFromJSONRequest {
    string payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
    optional Decrypter decrypter = 4;
}

message RecordBuilderFromBytesRequest {
    bytes payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
    optional Decrypter decrypter = 4;
}

message RecordBuilderFromFileRequest {
    bytes payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
    optional Decrypter decrypter = 4;
}

message RecordBuilderFromRecordRequest {
    Record payload = 1;
    optional Signer signer = 2;
    optional Encrypter encrypter = 3;
    optional Decrypter decrypter = 4;
}

message RecordBuilderResponse {
    Record record = 1;
    optional Error error = 2;
}

message SendRecordsRequest {
    ConfigData config_data = 1;
    repeated string records = 2;
}

message SendRecordsResponse {
    repeated RecordReceipt records = 1;
    optional Error error = 2;
}

enum DataAvailabilityType {
    HOSTED = 0;
}

message Loader {
    DataAvailabilityType type = 1;
    LoaderArgs args = 2;
}

message LoaderArgs {
    string hash = 1;
}

message RecordBuilderFromLoaderRequest {
    ConfigData config_data = 1;
    Loader loader = 2;
    optional Signer signer = 3;
    optional Encrypter encrypter = 4;
    optional Decrypter decrypter = 5;
}

message Publisher {
    DataAvailabilityType type = 1;
    PublisherArgs args = 2;
}

message PublisherArgs {}

message PublishRequest {
    ConfigData config_data = 1;
    Publisher publisher = 2;
    Record record = 3;
}

message PublishResponse {
    string hash = 1;
    optional Error error = 2;
}
