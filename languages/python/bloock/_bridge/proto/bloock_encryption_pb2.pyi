"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bloock_config_pb2
import bloock_encryption_entities_pb2
import bloock_record_entities_pb2
import bloock_shared_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class EncryptRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIG_DATA_FIELD_NUMBER: builtins.int
    RECORD_FIELD_NUMBER: builtins.int
    ENCRYPTER_FIELD_NUMBER: builtins.int
    @property
    def config_data(self) -> bloock_config_pb2.ConfigData: ...
    @property
    def record(self) -> bloock_record_entities_pb2.Record: ...
    @property
    def encrypter(self) -> bloock_encryption_entities_pb2.Encrypter: ...
    def __init__(
        self,
        *,
        config_data: bloock_config_pb2.ConfigData | None = ...,
        record: bloock_record_entities_pb2.Record | None = ...,
        encrypter: bloock_encryption_entities_pb2.Encrypter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config_data", b"config_data", "encrypter", b"encrypter", "record", b"record"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["config_data", b"config_data", "encrypter", b"encrypter", "record", b"record"]) -> None: ...

global___EncryptRequest = EncryptRequest

@typing_extensions.final
class EncryptResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RECORD_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    @property
    def record(self) -> bloock_record_entities_pb2.Record: ...
    @property
    def error(self) -> bloock_shared_pb2.Error: ...
    def __init__(
        self,
        *,
        record: bloock_record_entities_pb2.Record | None = ...,
        error: bloock_shared_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_error", b"_error", "error", b"error", "record", b"record"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_error", b"_error", "error", b"error", "record", b"record"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_error", b"_error"]) -> typing_extensions.Literal["error"] | None: ...

global___EncryptResponse = EncryptResponse

@typing_extensions.final
class DecryptRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIG_DATA_FIELD_NUMBER: builtins.int
    RECORD_FIELD_NUMBER: builtins.int
    DECRYPTER_FIELD_NUMBER: builtins.int
    @property
    def config_data(self) -> bloock_config_pb2.ConfigData: ...
    @property
    def record(self) -> bloock_record_entities_pb2.Record: ...
    @property
    def decrypter(self) -> bloock_encryption_entities_pb2.Encrypter: ...
    def __init__(
        self,
        *,
        config_data: bloock_config_pb2.ConfigData | None = ...,
        record: bloock_record_entities_pb2.Record | None = ...,
        decrypter: bloock_encryption_entities_pb2.Encrypter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config_data", b"config_data", "decrypter", b"decrypter", "record", b"record"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["config_data", b"config_data", "decrypter", b"decrypter", "record", b"record"]) -> None: ...

global___DecryptRequest = DecryptRequest

@typing_extensions.final
class DecryptResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RECORD_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    @property
    def record(self) -> bloock_record_entities_pb2.Record: ...
    @property
    def error(self) -> bloock_shared_pb2.Error: ...
    def __init__(
        self,
        *,
        record: bloock_record_entities_pb2.Record | None = ...,
        error: bloock_shared_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_error", b"_error", "error", b"error", "record", b"record"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_error", b"_error", "error", b"error", "record", b"record"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_error", b"_error"]) -> typing_extensions.Literal["error"] | None: ...

global___DecryptResponse = DecryptResponse

@typing_extensions.final
class EncryptionAlgRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIG_DATA_FIELD_NUMBER: builtins.int
    RECORD_FIELD_NUMBER: builtins.int
    @property
    def config_data(self) -> bloock_config_pb2.ConfigData: ...
    @property
    def record(self) -> bloock_record_entities_pb2.Record: ...
    def __init__(
        self,
        *,
        config_data: bloock_config_pb2.ConfigData | None = ...,
        record: bloock_record_entities_pb2.Record | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config_data", b"config_data", "record", b"record"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["config_data", b"config_data", "record", b"record"]) -> None: ...

global___EncryptionAlgRequest = EncryptionAlgRequest

@typing_extensions.final
class EncryptionAlgResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ALG_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    alg: bloock_encryption_entities_pb2.EncryptionAlg.ValueType
    @property
    def error(self) -> bloock_shared_pb2.Error: ...
    def __init__(
        self,
        *,
        alg: bloock_encryption_entities_pb2.EncryptionAlg.ValueType = ...,
        error: bloock_shared_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_error", b"_error", "error", b"error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_error", b"_error", "alg", b"alg", "error", b"error"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_error", b"_error"]) -> typing_extensions.Literal["error"] | None: ...

global___EncryptionAlgResponse = EncryptionAlgResponse
