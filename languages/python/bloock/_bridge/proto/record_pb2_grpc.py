# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import record_pb2 as record__pb2


class RecordServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendRecords = channel.unary_unary(
                '/bloock.RecordService/SendRecords',
                request_serializer=record__pb2.SendRecordsRequest.SerializeToString,
                response_deserializer=record__pb2.SendRecordsResponse.FromString,
                )
        self.FromHash = channel.unary_unary(
                '/bloock.RecordService/FromHash',
                request_serializer=record__pb2.FromHashRequest.SerializeToString,
                response_deserializer=record__pb2.Record.FromString,
                )
        self.FromHex = channel.unary_unary(
                '/bloock.RecordService/FromHex',
                request_serializer=record__pb2.FromHexRequest.SerializeToString,
                response_deserializer=record__pb2.FromHexResponse.FromString,
                )
        self.FromString = channel.unary_unary(
                '/bloock.RecordService/FromString',
                request_serializer=record__pb2.FromStringRequest.SerializeToString,
                response_deserializer=record__pb2.Record.FromString,
                )
        self.FromTypedArray = channel.unary_unary(
                '/bloock.RecordService/FromTypedArray',
                request_serializer=record__pb2.FromTypedArrayRequest.SerializeToString,
                response_deserializer=record__pb2.Record.FromString,
                )


class RecordServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FromHash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FromHex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FromString(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FromTypedArray(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecordServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.SendRecords,
                    request_deserializer=record__pb2.SendRecordsRequest.FromString,
                    response_serializer=record__pb2.SendRecordsResponse.SerializeToString,
            ),
            'FromHash': grpc.unary_unary_rpc_method_handler(
                    servicer.FromHash,
                    request_deserializer=record__pb2.FromHashRequest.FromString,
                    response_serializer=record__pb2.Record.SerializeToString,
            ),
            'FromHex': grpc.unary_unary_rpc_method_handler(
                    servicer.FromHex,
                    request_deserializer=record__pb2.FromHexRequest.FromString,
                    response_serializer=record__pb2.FromHexResponse.SerializeToString,
            ),
            'FromString': grpc.unary_unary_rpc_method_handler(
                    servicer.FromString,
                    request_deserializer=record__pb2.FromStringRequest.FromString,
                    response_serializer=record__pb2.Record.SerializeToString,
            ),
            'FromTypedArray': grpc.unary_unary_rpc_method_handler(
                    servicer.FromTypedArray,
                    request_deserializer=record__pb2.FromTypedArrayRequest.FromString,
                    response_serializer=record__pb2.Record.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bloock.RecordService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecordService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bloock.RecordService/SendRecords',
            record__pb2.SendRecordsRequest.SerializeToString,
            record__pb2.SendRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FromHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bloock.RecordService/FromHash',
            record__pb2.FromHashRequest.SerializeToString,
            record__pb2.Record.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FromHex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bloock.RecordService/FromHex',
            record__pb2.FromHexRequest.SerializeToString,
            record__pb2.FromHexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FromString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bloock.RecordService/FromString',
            record__pb2.FromStringRequest.SerializeToString,
            record__pb2.Record.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FromTypedArray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bloock.RecordService/FromTypedArray',
            record__pb2.FromTypedArrayRequest.SerializeToString,
            record__pb2.Record.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
