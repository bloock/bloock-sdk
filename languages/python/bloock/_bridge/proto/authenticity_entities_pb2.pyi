"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import keys_entities_pb2
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Signer(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOCAL_KEY_FIELD_NUMBER: builtins.int
    MANAGED_KEY_FIELD_NUMBER: builtins.int
    LOCAL_CERTIFICATE_FIELD_NUMBER: builtins.int
    MANAGED_CERTIFICATE_FIELD_NUMBER: builtins.int
    COMMON_NAME_FIELD_NUMBER: builtins.int
    @property
    def local_key(self) -> keys_entities_pb2.LocalKey: ...
    @property
    def managed_key(self) -> keys_entities_pb2.ManagedKey: ...
    @property
    def local_certificate(self) -> keys_entities_pb2.LocalCertificate: ...
    @property
    def managed_certificate(self) -> keys_entities_pb2.ManagedCertificate: ...
    common_name: builtins.str
    def __init__(
        self,
        *,
        local_key: keys_entities_pb2.LocalKey | None = ...,
        managed_key: keys_entities_pb2.ManagedKey | None = ...,
        local_certificate: keys_entities_pb2.LocalCertificate | None = ...,
        managed_certificate: keys_entities_pb2.ManagedCertificate | None = ...,
        common_name: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_common_name", b"_common_name", "_local_certificate", b"_local_certificate", "_local_key", b"_local_key", "_managed_certificate", b"_managed_certificate", "_managed_key", b"_managed_key", "common_name", b"common_name", "local_certificate", b"local_certificate", "local_key", b"local_key", "managed_certificate", b"managed_certificate", "managed_key", b"managed_key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_common_name", b"_common_name", "_local_certificate", b"_local_certificate", "_local_key", b"_local_key", "_managed_certificate", b"_managed_certificate", "_managed_key", b"_managed_key", "common_name", b"common_name", "local_certificate", b"local_certificate", "local_key", b"local_key", "managed_certificate", b"managed_certificate", "managed_key", b"managed_key"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_common_name", b"_common_name"]) -> typing_extensions.Literal["common_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_local_certificate", b"_local_certificate"]) -> typing_extensions.Literal["local_certificate"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_local_key", b"_local_key"]) -> typing_extensions.Literal["local_key"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_managed_certificate", b"_managed_certificate"]) -> typing_extensions.Literal["managed_certificate"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_managed_key", b"_managed_key"]) -> typing_extensions.Literal["managed_key"] | None: ...

global___Signer = Signer

class Signature(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGNATURE_FIELD_NUMBER: builtins.int
    ALG_FIELD_NUMBER: builtins.int
    KID_FIELD_NUMBER: builtins.int
    MESSAGE_HASH_FIELD_NUMBER: builtins.int
    SUBJECT_FIELD_NUMBER: builtins.int
    signature: builtins.str
    alg: builtins.str
    kid: builtins.str
    message_hash: builtins.str
    subject: builtins.str
    def __init__(
        self,
        *,
        signature: builtins.str = ...,
        alg: builtins.str = ...,
        kid: builtins.str = ...,
        message_hash: builtins.str = ...,
        subject: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_subject", b"_subject", "subject", b"subject"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_subject", b"_subject", "alg", b"alg", "kid", b"kid", "message_hash", b"message_hash", "signature", b"signature", "subject", b"subject"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_subject", b"_subject"]) -> typing_extensions.Literal["subject"] | None: ...

global___Signature = Signature
