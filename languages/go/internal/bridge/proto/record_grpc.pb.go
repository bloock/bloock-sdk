// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: record.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordServiceClient interface {
	BuildRecordFromString(ctx context.Context, in *RecordBuilderFromStringRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error)
	BuildRecordFromHex(ctx context.Context, in *RecordBuilderFromHexRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error)
	BuildRecordFromJson(ctx context.Context, in *RecordBuilderFromJSONRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error)
	BuildRecordFromFile(ctx context.Context, in *RecordBuilderFromFileRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error)
	BuildRecordFromBytes(ctx context.Context, in *RecordBuilderFromBytesRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error)
	BuildRecordFromRecord(ctx context.Context, in *RecordBuilderFromRecordRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error)
	BuildRecordFromLoader(ctx context.Context, in *RecordBuilderFromLoaderRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error)
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error)
	GetHash(ctx context.Context, in *GetHashRequest, opts ...grpc.CallOption) (*GetHashResponse, error)
	GetPayload(ctx context.Context, in *GetPayloadRequest, opts ...grpc.CallOption) (*GetPayloadResponse, error)
	SetProof(ctx context.Context, in *SetProofRequest, opts ...grpc.CallOption) (*SetProofResponse, error)
}

type recordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordServiceClient(cc grpc.ClientConnInterface) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) BuildRecordFromString(ctx context.Context, in *RecordBuilderFromStringRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error) {
	out := new(RecordBuilderResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/BuildRecordFromString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) BuildRecordFromHex(ctx context.Context, in *RecordBuilderFromHexRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error) {
	out := new(RecordBuilderResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/BuildRecordFromHex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) BuildRecordFromJson(ctx context.Context, in *RecordBuilderFromJSONRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error) {
	out := new(RecordBuilderResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/BuildRecordFromJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) BuildRecordFromFile(ctx context.Context, in *RecordBuilderFromFileRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error) {
	out := new(RecordBuilderResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/BuildRecordFromFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) BuildRecordFromBytes(ctx context.Context, in *RecordBuilderFromBytesRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error) {
	out := new(RecordBuilderResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/BuildRecordFromBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) BuildRecordFromRecord(ctx context.Context, in *RecordBuilderFromRecordRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error) {
	out := new(RecordBuilderResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/BuildRecordFromRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) BuildRecordFromLoader(ctx context.Context, in *RecordBuilderFromLoaderRequest, opts ...grpc.CallOption) (*RecordBuilderResponse, error) {
	out := new(RecordBuilderResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/BuildRecordFromLoader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error) {
	out := new(GetDetailsResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetHash(ctx context.Context, in *GetHashRequest, opts ...grpc.CallOption) (*GetHashResponse, error) {
	out := new(GetHashResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/GetHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) GetPayload(ctx context.Context, in *GetPayloadRequest, opts ...grpc.CallOption) (*GetPayloadResponse, error) {
	out := new(GetPayloadResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/GetPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) SetProof(ctx context.Context, in *SetProofRequest, opts ...grpc.CallOption) (*SetProofResponse, error) {
	out := new(SetProofResponse)
	err := c.cc.Invoke(ctx, "/bloock.RecordService/SetProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServiceServer is the server API for RecordService service.
// All implementations must embed UnimplementedRecordServiceServer
// for forward compatibility
type RecordServiceServer interface {
	BuildRecordFromString(context.Context, *RecordBuilderFromStringRequest) (*RecordBuilderResponse, error)
	BuildRecordFromHex(context.Context, *RecordBuilderFromHexRequest) (*RecordBuilderResponse, error)
	BuildRecordFromJson(context.Context, *RecordBuilderFromJSONRequest) (*RecordBuilderResponse, error)
	BuildRecordFromFile(context.Context, *RecordBuilderFromFileRequest) (*RecordBuilderResponse, error)
	BuildRecordFromBytes(context.Context, *RecordBuilderFromBytesRequest) (*RecordBuilderResponse, error)
	BuildRecordFromRecord(context.Context, *RecordBuilderFromRecordRequest) (*RecordBuilderResponse, error)
	BuildRecordFromLoader(context.Context, *RecordBuilderFromLoaderRequest) (*RecordBuilderResponse, error)
	GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error)
	GetHash(context.Context, *GetHashRequest) (*GetHashResponse, error)
	GetPayload(context.Context, *GetPayloadRequest) (*GetPayloadResponse, error)
	SetProof(context.Context, *SetProofRequest) (*SetProofResponse, error)
	mustEmbedUnimplementedRecordServiceServer()
}

// UnimplementedRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordServiceServer struct {
}

func (UnimplementedRecordServiceServer) BuildRecordFromString(context.Context, *RecordBuilderFromStringRequest) (*RecordBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRecordFromString not implemented")
}
func (UnimplementedRecordServiceServer) BuildRecordFromHex(context.Context, *RecordBuilderFromHexRequest) (*RecordBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRecordFromHex not implemented")
}
func (UnimplementedRecordServiceServer) BuildRecordFromJson(context.Context, *RecordBuilderFromJSONRequest) (*RecordBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRecordFromJson not implemented")
}
func (UnimplementedRecordServiceServer) BuildRecordFromFile(context.Context, *RecordBuilderFromFileRequest) (*RecordBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRecordFromFile not implemented")
}
func (UnimplementedRecordServiceServer) BuildRecordFromBytes(context.Context, *RecordBuilderFromBytesRequest) (*RecordBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRecordFromBytes not implemented")
}
func (UnimplementedRecordServiceServer) BuildRecordFromRecord(context.Context, *RecordBuilderFromRecordRequest) (*RecordBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRecordFromRecord not implemented")
}
func (UnimplementedRecordServiceServer) BuildRecordFromLoader(context.Context, *RecordBuilderFromLoaderRequest) (*RecordBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRecordFromLoader not implemented")
}
func (UnimplementedRecordServiceServer) GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedRecordServiceServer) GetHash(context.Context, *GetHashRequest) (*GetHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHash not implemented")
}
func (UnimplementedRecordServiceServer) GetPayload(context.Context, *GetPayloadRequest) (*GetPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayload not implemented")
}
func (UnimplementedRecordServiceServer) SetProof(context.Context, *SetProofRequest) (*SetProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProof not implemented")
}
func (UnimplementedRecordServiceServer) mustEmbedUnimplementedRecordServiceServer() {}

// UnsafeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServiceServer will
// result in compilation errors.
type UnsafeRecordServiceServer interface {
	mustEmbedUnimplementedRecordServiceServer()
}

func RegisterRecordServiceServer(s grpc.ServiceRegistrar, srv RecordServiceServer) {
	s.RegisterService(&RecordService_ServiceDesc, srv)
}

func _RecordService_BuildRecordFromString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordBuilderFromStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).BuildRecordFromString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/BuildRecordFromString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).BuildRecordFromString(ctx, req.(*RecordBuilderFromStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_BuildRecordFromHex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordBuilderFromHexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).BuildRecordFromHex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/BuildRecordFromHex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).BuildRecordFromHex(ctx, req.(*RecordBuilderFromHexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_BuildRecordFromJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordBuilderFromJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).BuildRecordFromJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/BuildRecordFromJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).BuildRecordFromJson(ctx, req.(*RecordBuilderFromJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_BuildRecordFromFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordBuilderFromFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).BuildRecordFromFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/BuildRecordFromFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).BuildRecordFromFile(ctx, req.(*RecordBuilderFromFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_BuildRecordFromBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordBuilderFromBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).BuildRecordFromBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/BuildRecordFromBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).BuildRecordFromBytes(ctx, req.(*RecordBuilderFromBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_BuildRecordFromRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordBuilderFromRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).BuildRecordFromRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/BuildRecordFromRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).BuildRecordFromRecord(ctx, req.(*RecordBuilderFromRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_BuildRecordFromLoader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordBuilderFromLoaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).BuildRecordFromLoader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/BuildRecordFromLoader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).BuildRecordFromLoader(ctx, req.(*RecordBuilderFromLoaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/GetHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetHash(ctx, req.(*GetHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_GetPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/GetPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetPayload(ctx, req.(*GetPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_SetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).SetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.RecordService/SetProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).SetProof(ctx, req.(*SetProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordService_ServiceDesc is the grpc.ServiceDesc for RecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bloock.RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildRecordFromString",
			Handler:    _RecordService_BuildRecordFromString_Handler,
		},
		{
			MethodName: "BuildRecordFromHex",
			Handler:    _RecordService_BuildRecordFromHex_Handler,
		},
		{
			MethodName: "BuildRecordFromJson",
			Handler:    _RecordService_BuildRecordFromJson_Handler,
		},
		{
			MethodName: "BuildRecordFromFile",
			Handler:    _RecordService_BuildRecordFromFile_Handler,
		},
		{
			MethodName: "BuildRecordFromBytes",
			Handler:    _RecordService_BuildRecordFromBytes_Handler,
		},
		{
			MethodName: "BuildRecordFromRecord",
			Handler:    _RecordService_BuildRecordFromRecord_Handler,
		},
		{
			MethodName: "BuildRecordFromLoader",
			Handler:    _RecordService_BuildRecordFromLoader_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _RecordService_GetDetails_Handler,
		},
		{
			MethodName: "GetHash",
			Handler:    _RecordService_GetHash_Handler,
		},
		{
			MethodName: "GetPayload",
			Handler:    _RecordService_GetPayload_Handler,
		},
		{
			MethodName: "SetProof",
			Handler:    _RecordService_SetProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "record.proto",
}
