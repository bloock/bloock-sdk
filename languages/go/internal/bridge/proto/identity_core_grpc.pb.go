// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: identity_core.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityCoreServiceClient is the client API for IdentityCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityCoreServiceClient interface {
	CreateCoreCredential(ctx context.Context, in *CreateCoreCredentialRequest, opts ...grpc.CallOption) (*CreateCoreCredentialResponse, error)
}

type identityCoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityCoreServiceClient(cc grpc.ClientConnInterface) IdentityCoreServiceClient {
	return &identityCoreServiceClient{cc}
}

func (c *identityCoreServiceClient) CreateCoreCredential(ctx context.Context, in *CreateCoreCredentialRequest, opts ...grpc.CallOption) (*CreateCoreCredentialResponse, error) {
	out := new(CreateCoreCredentialResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityCoreService/CreateCoreCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityCoreServiceServer is the server API for IdentityCoreService service.
// All implementations must embed UnimplementedIdentityCoreServiceServer
// for forward compatibility
type IdentityCoreServiceServer interface {
	CreateCoreCredential(context.Context, *CreateCoreCredentialRequest) (*CreateCoreCredentialResponse, error)
	mustEmbedUnimplementedIdentityCoreServiceServer()
}

// UnimplementedIdentityCoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityCoreServiceServer struct {
}

func (UnimplementedIdentityCoreServiceServer) CreateCoreCredential(context.Context, *CreateCoreCredentialRequest) (*CreateCoreCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoreCredential not implemented")
}
func (UnimplementedIdentityCoreServiceServer) mustEmbedUnimplementedIdentityCoreServiceServer() {}

// UnsafeIdentityCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityCoreServiceServer will
// result in compilation errors.
type UnsafeIdentityCoreServiceServer interface {
	mustEmbedUnimplementedIdentityCoreServiceServer()
}

func RegisterIdentityCoreServiceServer(s grpc.ServiceRegistrar, srv IdentityCoreServiceServer) {
	s.RegisterService(&IdentityCoreService_ServiceDesc, srv)
}

func _IdentityCoreService_CreateCoreCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoreCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityCoreServiceServer).CreateCoreCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityCoreService/CreateCoreCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityCoreServiceServer).CreateCoreCredential(ctx, req.(*CreateCoreCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityCoreService_ServiceDesc is the grpc.ServiceDesc for IdentityCoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityCoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bloock.IdentityCoreService",
	HandlerType: (*IdentityCoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoreCredential",
			Handler:    _IdentityCoreService_CreateCoreCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity_core.proto",
}
