// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: bloock_identity.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityServiceClient is the client API for IdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityServiceClient interface {
	CreateHolder(ctx context.Context, in *CreateHolderRequest, opts ...grpc.CallOption) (*CreateHolderResponse, error)
	CreateIssuer(ctx context.Context, in *CreateIssuerRequest, opts ...grpc.CallOption) (*CreateIssuerResponse, error)
	ImportIssuer(ctx context.Context, in *ImportIssuerRequest, opts ...grpc.CallOption) (*ImportIssuerResponse, error)
	BuildSchema(ctx context.Context, in *BuildSchemaRequest, opts ...grpc.CallOption) (*BuildSchemaResponse, error)
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error)
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	GetCredentialProof(ctx context.Context, in *GetCredentialProofRequest, opts ...grpc.CallOption) (*GetCredentialProofResponse, error)
	RevokeCredential(ctx context.Context, in *RevokeCredentialRequest, opts ...grpc.CallOption) (*RevokeCredentialResponse, error)
	CredentialToJson(ctx context.Context, in *CredentialToJsonRequest, opts ...grpc.CallOption) (*CredentialToJsonResponse, error)
	CredentialFromJson(ctx context.Context, in *CredentialFromJsonRequest, opts ...grpc.CallOption) (*CredentialFromJsonResponse, error)
	GetCredentialOffer(ctx context.Context, in *GetCredentialOfferRequest, opts ...grpc.CallOption) (*GetCredentialOfferResponse, error)
	ForcePublishIssuerState(ctx context.Context, in *ForcePublishIssuerStateRequest, opts ...grpc.CallOption) (*ForcePublishIssuerStateResponse, error)
	CreateVerification(ctx context.Context, in *CreateVerificationRequest, opts ...grpc.CallOption) (*CreateVerificationResponse, error)
	WaitVerification(ctx context.Context, in *WaitVerificationRequest, opts ...grpc.CallOption) (*WaitVerificationResponse, error)
	GetVerificationStatus(ctx context.Context, in *GetVerificationStatusRequest, opts ...grpc.CallOption) (*GetVerificationStatusResponse, error)
}

type identityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityServiceClient(cc grpc.ClientConnInterface) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) CreateHolder(ctx context.Context, in *CreateHolderRequest, opts ...grpc.CallOption) (*CreateHolderResponse, error) {
	out := new(CreateHolderResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/CreateHolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateIssuer(ctx context.Context, in *CreateIssuerRequest, opts ...grpc.CallOption) (*CreateIssuerResponse, error) {
	out := new(CreateIssuerResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/CreateIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ImportIssuer(ctx context.Context, in *ImportIssuerRequest, opts ...grpc.CallOption) (*ImportIssuerResponse, error) {
	out := new(ImportIssuerResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/ImportIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) BuildSchema(ctx context.Context, in *BuildSchemaRequest, opts ...grpc.CallOption) (*BuildSchemaResponse, error) {
	out := new(BuildSchemaResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/BuildSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*CreateCredentialResponse, error) {
	out := new(CreateCredentialResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetCredentialProof(ctx context.Context, in *GetCredentialProofRequest, opts ...grpc.CallOption) (*GetCredentialProofResponse, error) {
	out := new(GetCredentialProofResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/GetCredentialProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RevokeCredential(ctx context.Context, in *RevokeCredentialRequest, opts ...grpc.CallOption) (*RevokeCredentialResponse, error) {
	out := new(RevokeCredentialResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/RevokeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CredentialToJson(ctx context.Context, in *CredentialToJsonRequest, opts ...grpc.CallOption) (*CredentialToJsonResponse, error) {
	out := new(CredentialToJsonResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/CredentialToJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CredentialFromJson(ctx context.Context, in *CredentialFromJsonRequest, opts ...grpc.CallOption) (*CredentialFromJsonResponse, error) {
	out := new(CredentialFromJsonResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/CredentialFromJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetCredentialOffer(ctx context.Context, in *GetCredentialOfferRequest, opts ...grpc.CallOption) (*GetCredentialOfferResponse, error) {
	out := new(GetCredentialOfferResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/GetCredentialOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ForcePublishIssuerState(ctx context.Context, in *ForcePublishIssuerStateRequest, opts ...grpc.CallOption) (*ForcePublishIssuerStateResponse, error) {
	out := new(ForcePublishIssuerStateResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/ForcePublishIssuerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateVerification(ctx context.Context, in *CreateVerificationRequest, opts ...grpc.CallOption) (*CreateVerificationResponse, error) {
	out := new(CreateVerificationResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/CreateVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) WaitVerification(ctx context.Context, in *WaitVerificationRequest, opts ...grpc.CallOption) (*WaitVerificationResponse, error) {
	out := new(WaitVerificationResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/WaitVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetVerificationStatus(ctx context.Context, in *GetVerificationStatusRequest, opts ...grpc.CallOption) (*GetVerificationStatusResponse, error) {
	out := new(GetVerificationStatusResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityService/GetVerificationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServiceServer is the server API for IdentityService service.
// All implementations must embed UnimplementedIdentityServiceServer
// for forward compatibility
type IdentityServiceServer interface {
	CreateHolder(context.Context, *CreateHolderRequest) (*CreateHolderResponse, error)
	CreateIssuer(context.Context, *CreateIssuerRequest) (*CreateIssuerResponse, error)
	ImportIssuer(context.Context, *ImportIssuerRequest) (*ImportIssuerResponse, error)
	BuildSchema(context.Context, *BuildSchemaRequest) (*BuildSchemaResponse, error)
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error)
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	GetCredentialProof(context.Context, *GetCredentialProofRequest) (*GetCredentialProofResponse, error)
	RevokeCredential(context.Context, *RevokeCredentialRequest) (*RevokeCredentialResponse, error)
	CredentialToJson(context.Context, *CredentialToJsonRequest) (*CredentialToJsonResponse, error)
	CredentialFromJson(context.Context, *CredentialFromJsonRequest) (*CredentialFromJsonResponse, error)
	GetCredentialOffer(context.Context, *GetCredentialOfferRequest) (*GetCredentialOfferResponse, error)
	ForcePublishIssuerState(context.Context, *ForcePublishIssuerStateRequest) (*ForcePublishIssuerStateResponse, error)
	CreateVerification(context.Context, *CreateVerificationRequest) (*CreateVerificationResponse, error)
	WaitVerification(context.Context, *WaitVerificationRequest) (*WaitVerificationResponse, error)
	GetVerificationStatus(context.Context, *GetVerificationStatusRequest) (*GetVerificationStatusResponse, error)
	mustEmbedUnimplementedIdentityServiceServer()
}

// UnimplementedIdentityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityServiceServer struct {
}

func (UnimplementedIdentityServiceServer) CreateHolder(context.Context, *CreateHolderRequest) (*CreateHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHolder not implemented")
}
func (UnimplementedIdentityServiceServer) CreateIssuer(context.Context, *CreateIssuerRequest) (*CreateIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssuer not implemented")
}
func (UnimplementedIdentityServiceServer) ImportIssuer(context.Context, *ImportIssuerRequest) (*ImportIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportIssuer not implemented")
}
func (UnimplementedIdentityServiceServer) BuildSchema(context.Context, *BuildSchemaRequest) (*BuildSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSchema not implemented")
}
func (UnimplementedIdentityServiceServer) GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedIdentityServiceServer) CreateCredential(context.Context, *CreateCredentialRequest) (*CreateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedIdentityServiceServer) GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedIdentityServiceServer) GetCredentialProof(context.Context, *GetCredentialProofRequest) (*GetCredentialProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialProof not implemented")
}
func (UnimplementedIdentityServiceServer) RevokeCredential(context.Context, *RevokeCredentialRequest) (*RevokeCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCredential not implemented")
}
func (UnimplementedIdentityServiceServer) CredentialToJson(context.Context, *CredentialToJsonRequest) (*CredentialToJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialToJson not implemented")
}
func (UnimplementedIdentityServiceServer) CredentialFromJson(context.Context, *CredentialFromJsonRequest) (*CredentialFromJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialFromJson not implemented")
}
func (UnimplementedIdentityServiceServer) GetCredentialOffer(context.Context, *GetCredentialOfferRequest) (*GetCredentialOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialOffer not implemented")
}
func (UnimplementedIdentityServiceServer) ForcePublishIssuerState(context.Context, *ForcePublishIssuerStateRequest) (*ForcePublishIssuerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForcePublishIssuerState not implemented")
}
func (UnimplementedIdentityServiceServer) CreateVerification(context.Context, *CreateVerificationRequest) (*CreateVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVerification not implemented")
}
func (UnimplementedIdentityServiceServer) WaitVerification(context.Context, *WaitVerificationRequest) (*WaitVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitVerification not implemented")
}
func (UnimplementedIdentityServiceServer) GetVerificationStatus(context.Context, *GetVerificationStatusRequest) (*GetVerificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerificationStatus not implemented")
}
func (UnimplementedIdentityServiceServer) mustEmbedUnimplementedIdentityServiceServer() {}

// UnsafeIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServiceServer will
// result in compilation errors.
type UnsafeIdentityServiceServer interface {
	mustEmbedUnimplementedIdentityServiceServer()
}

func RegisterIdentityServiceServer(s grpc.ServiceRegistrar, srv IdentityServiceServer) {
	s.RegisterService(&IdentityService_ServiceDesc, srv)
}

func _IdentityService_CreateHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/CreateHolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateHolder(ctx, req.(*CreateHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/CreateIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateIssuer(ctx, req.(*CreateIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ImportIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ImportIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/ImportIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ImportIssuer(ctx, req.(*ImportIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_BuildSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).BuildSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/BuildSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).BuildSchema(ctx, req.(*BuildSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetCredentialProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetCredentialProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/GetCredentialProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetCredentialProof(ctx, req.(*GetCredentialProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RevokeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RevokeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/RevokeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RevokeCredential(ctx, req.(*RevokeCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CredentialToJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialToJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CredentialToJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/CredentialToJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CredentialToJson(ctx, req.(*CredentialToJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CredentialFromJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialFromJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CredentialFromJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/CredentialFromJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CredentialFromJson(ctx, req.(*CredentialFromJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetCredentialOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetCredentialOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/GetCredentialOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetCredentialOffer(ctx, req.(*GetCredentialOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ForcePublishIssuerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForcePublishIssuerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ForcePublishIssuerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/ForcePublishIssuerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ForcePublishIssuerState(ctx, req.(*ForcePublishIssuerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/CreateVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateVerification(ctx, req.(*CreateVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_WaitVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).WaitVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/WaitVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).WaitVerification(ctx, req.(*WaitVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetVerificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetVerificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityService/GetVerificationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetVerificationStatus(ctx, req.(*GetVerificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityService_ServiceDesc is the grpc.ServiceDesc for IdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bloock.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHolder",
			Handler:    _IdentityService_CreateHolder_Handler,
		},
		{
			MethodName: "CreateIssuer",
			Handler:    _IdentityService_CreateIssuer_Handler,
		},
		{
			MethodName: "ImportIssuer",
			Handler:    _IdentityService_ImportIssuer_Handler,
		},
		{
			MethodName: "BuildSchema",
			Handler:    _IdentityService_BuildSchema_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _IdentityService_GetSchema_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _IdentityService_CreateCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _IdentityService_GetCredential_Handler,
		},
		{
			MethodName: "GetCredentialProof",
			Handler:    _IdentityService_GetCredentialProof_Handler,
		},
		{
			MethodName: "RevokeCredential",
			Handler:    _IdentityService_RevokeCredential_Handler,
		},
		{
			MethodName: "CredentialToJson",
			Handler:    _IdentityService_CredentialToJson_Handler,
		},
		{
			MethodName: "CredentialFromJson",
			Handler:    _IdentityService_CredentialFromJson_Handler,
		},
		{
			MethodName: "GetCredentialOffer",
			Handler:    _IdentityService_GetCredentialOffer_Handler,
		},
		{
			MethodName: "ForcePublishIssuerState",
			Handler:    _IdentityService_ForcePublishIssuerState_Handler,
		},
		{
			MethodName: "CreateVerification",
			Handler:    _IdentityService_CreateVerification_Handler,
		},
		{
			MethodName: "WaitVerification",
			Handler:    _IdentityService_WaitVerification_Handler,
		},
		{
			MethodName: "GetVerificationStatus",
			Handler:    _IdentityService_GetVerificationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bloock_identity.proto",
}
