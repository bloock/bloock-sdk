// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: identity_v2.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityServiceV2Client is the client API for IdentityServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityServiceV2Client interface {
	CreateIssuer(ctx context.Context, in *CreateIssuerRequest, opts ...grpc.CallOption) (*CreateIssuerResponse, error)
	GetIssuerList(ctx context.Context, in *GetIssuerListRequest, opts ...grpc.CallOption) (*GetIssuerListResponse, error)
	GetIssuerByKey(ctx context.Context, in *GetIssuerByKeyRequest, opts ...grpc.CallOption) (*GetIssuerByKeyResponse, error)
	BuildSchema(ctx context.Context, in *BuildSchemaRequestV2, opts ...grpc.CallOption) (*BuildSchemaResponseV2, error)
	GetSchema(ctx context.Context, in *GetSchemaRequestV2, opts ...grpc.CallOption) (*GetSchemaResponseV2, error)
	CreateCredential(ctx context.Context, in *CreateCredentialRequestV2, opts ...grpc.CallOption) (*CreateCredentialResponseV2, error)
	GetCredentialProof(ctx context.Context, in *GetCredentialProofRequest, opts ...grpc.CallOption) (*GetCredentialProofResponse, error)
	RevokeCredential(ctx context.Context, in *RevokeCredentialRequestV2, opts ...grpc.CallOption) (*RevokeCredentialResponseV2, error)
	CredentialToJson(ctx context.Context, in *CredentialToJsonRequestV2, opts ...grpc.CallOption) (*CredentialToJsonResponseV2, error)
	CredentialFromJson(ctx context.Context, in *CredentialFromJsonRequestV2, opts ...grpc.CallOption) (*CredentialFromJsonResponseV2, error)
	PublishIssuerState(ctx context.Context, in *PublishIssuerStateRequest, opts ...grpc.CallOption) (*PublishIssuerStateResponse, error)
}

type identityServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewIdentityServiceV2Client(cc grpc.ClientConnInterface) IdentityServiceV2Client {
	return &identityServiceV2Client{cc}
}

func (c *identityServiceV2Client) CreateIssuer(ctx context.Context, in *CreateIssuerRequest, opts ...grpc.CallOption) (*CreateIssuerResponse, error) {
	out := new(CreateIssuerResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/CreateIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) GetIssuerList(ctx context.Context, in *GetIssuerListRequest, opts ...grpc.CallOption) (*GetIssuerListResponse, error) {
	out := new(GetIssuerListResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/GetIssuerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) GetIssuerByKey(ctx context.Context, in *GetIssuerByKeyRequest, opts ...grpc.CallOption) (*GetIssuerByKeyResponse, error) {
	out := new(GetIssuerByKeyResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/GetIssuerByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) BuildSchema(ctx context.Context, in *BuildSchemaRequestV2, opts ...grpc.CallOption) (*BuildSchemaResponseV2, error) {
	out := new(BuildSchemaResponseV2)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/BuildSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) GetSchema(ctx context.Context, in *GetSchemaRequestV2, opts ...grpc.CallOption) (*GetSchemaResponseV2, error) {
	out := new(GetSchemaResponseV2)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) CreateCredential(ctx context.Context, in *CreateCredentialRequestV2, opts ...grpc.CallOption) (*CreateCredentialResponseV2, error) {
	out := new(CreateCredentialResponseV2)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) GetCredentialProof(ctx context.Context, in *GetCredentialProofRequest, opts ...grpc.CallOption) (*GetCredentialProofResponse, error) {
	out := new(GetCredentialProofResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/GetCredentialProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) RevokeCredential(ctx context.Context, in *RevokeCredentialRequestV2, opts ...grpc.CallOption) (*RevokeCredentialResponseV2, error) {
	out := new(RevokeCredentialResponseV2)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/RevokeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) CredentialToJson(ctx context.Context, in *CredentialToJsonRequestV2, opts ...grpc.CallOption) (*CredentialToJsonResponseV2, error) {
	out := new(CredentialToJsonResponseV2)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/CredentialToJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) CredentialFromJson(ctx context.Context, in *CredentialFromJsonRequestV2, opts ...grpc.CallOption) (*CredentialFromJsonResponseV2, error) {
	out := new(CredentialFromJsonResponseV2)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/CredentialFromJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceV2Client) PublishIssuerState(ctx context.Context, in *PublishIssuerStateRequest, opts ...grpc.CallOption) (*PublishIssuerStateResponse, error) {
	out := new(PublishIssuerStateResponse)
	err := c.cc.Invoke(ctx, "/bloock.IdentityServiceV2/PublishIssuerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServiceV2Server is the server API for IdentityServiceV2 service.
// All implementations must embed UnimplementedIdentityServiceV2Server
// for forward compatibility
type IdentityServiceV2Server interface {
	CreateIssuer(context.Context, *CreateIssuerRequest) (*CreateIssuerResponse, error)
	GetIssuerList(context.Context, *GetIssuerListRequest) (*GetIssuerListResponse, error)
	GetIssuerByKey(context.Context, *GetIssuerByKeyRequest) (*GetIssuerByKeyResponse, error)
	BuildSchema(context.Context, *BuildSchemaRequestV2) (*BuildSchemaResponseV2, error)
	GetSchema(context.Context, *GetSchemaRequestV2) (*GetSchemaResponseV2, error)
	CreateCredential(context.Context, *CreateCredentialRequestV2) (*CreateCredentialResponseV2, error)
	GetCredentialProof(context.Context, *GetCredentialProofRequest) (*GetCredentialProofResponse, error)
	RevokeCredential(context.Context, *RevokeCredentialRequestV2) (*RevokeCredentialResponseV2, error)
	CredentialToJson(context.Context, *CredentialToJsonRequestV2) (*CredentialToJsonResponseV2, error)
	CredentialFromJson(context.Context, *CredentialFromJsonRequestV2) (*CredentialFromJsonResponseV2, error)
	PublishIssuerState(context.Context, *PublishIssuerStateRequest) (*PublishIssuerStateResponse, error)
	mustEmbedUnimplementedIdentityServiceV2Server()
}

// UnimplementedIdentityServiceV2Server must be embedded to have forward compatible implementations.
type UnimplementedIdentityServiceV2Server struct {
}

func (UnimplementedIdentityServiceV2Server) CreateIssuer(context.Context, *CreateIssuerRequest) (*CreateIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssuer not implemented")
}
func (UnimplementedIdentityServiceV2Server) GetIssuerList(context.Context, *GetIssuerListRequest) (*GetIssuerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuerList not implemented")
}
func (UnimplementedIdentityServiceV2Server) GetIssuerByKey(context.Context, *GetIssuerByKeyRequest) (*GetIssuerByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuerByKey not implemented")
}
func (UnimplementedIdentityServiceV2Server) BuildSchema(context.Context, *BuildSchemaRequestV2) (*BuildSchemaResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSchema not implemented")
}
func (UnimplementedIdentityServiceV2Server) GetSchema(context.Context, *GetSchemaRequestV2) (*GetSchemaResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedIdentityServiceV2Server) CreateCredential(context.Context, *CreateCredentialRequestV2) (*CreateCredentialResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedIdentityServiceV2Server) GetCredentialProof(context.Context, *GetCredentialProofRequest) (*GetCredentialProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialProof not implemented")
}
func (UnimplementedIdentityServiceV2Server) RevokeCredential(context.Context, *RevokeCredentialRequestV2) (*RevokeCredentialResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCredential not implemented")
}
func (UnimplementedIdentityServiceV2Server) CredentialToJson(context.Context, *CredentialToJsonRequestV2) (*CredentialToJsonResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialToJson not implemented")
}
func (UnimplementedIdentityServiceV2Server) CredentialFromJson(context.Context, *CredentialFromJsonRequestV2) (*CredentialFromJsonResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialFromJson not implemented")
}
func (UnimplementedIdentityServiceV2Server) PublishIssuerState(context.Context, *PublishIssuerStateRequest) (*PublishIssuerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishIssuerState not implemented")
}
func (UnimplementedIdentityServiceV2Server) mustEmbedUnimplementedIdentityServiceV2Server() {}

// UnsafeIdentityServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServiceV2Server will
// result in compilation errors.
type UnsafeIdentityServiceV2Server interface {
	mustEmbedUnimplementedIdentityServiceV2Server()
}

func RegisterIdentityServiceV2Server(s grpc.ServiceRegistrar, srv IdentityServiceV2Server) {
	s.RegisterService(&IdentityServiceV2_ServiceDesc, srv)
}

func _IdentityServiceV2_CreateIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).CreateIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/CreateIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).CreateIssuer(ctx, req.(*CreateIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_GetIssuerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).GetIssuerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/GetIssuerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).GetIssuerList(ctx, req.(*GetIssuerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_GetIssuerByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuerByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).GetIssuerByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/GetIssuerByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).GetIssuerByKey(ctx, req.(*GetIssuerByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_BuildSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSchemaRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).BuildSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/BuildSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).BuildSchema(ctx, req.(*BuildSchemaRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).GetSchema(ctx, req.(*GetSchemaRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).CreateCredential(ctx, req.(*CreateCredentialRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_GetCredentialProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).GetCredentialProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/GetCredentialProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).GetCredentialProof(ctx, req.(*GetCredentialProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_RevokeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCredentialRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).RevokeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/RevokeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).RevokeCredential(ctx, req.(*RevokeCredentialRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_CredentialToJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialToJsonRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).CredentialToJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/CredentialToJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).CredentialToJson(ctx, req.(*CredentialToJsonRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_CredentialFromJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialFromJsonRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).CredentialFromJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/CredentialFromJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).CredentialFromJson(ctx, req.(*CredentialFromJsonRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityServiceV2_PublishIssuerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishIssuerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceV2Server).PublishIssuerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.IdentityServiceV2/PublishIssuerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceV2Server).PublishIssuerState(ctx, req.(*PublishIssuerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityServiceV2_ServiceDesc is the grpc.ServiceDesc for IdentityServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bloock.IdentityServiceV2",
	HandlerType: (*IdentityServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIssuer",
			Handler:    _IdentityServiceV2_CreateIssuer_Handler,
		},
		{
			MethodName: "GetIssuerList",
			Handler:    _IdentityServiceV2_GetIssuerList_Handler,
		},
		{
			MethodName: "GetIssuerByKey",
			Handler:    _IdentityServiceV2_GetIssuerByKey_Handler,
		},
		{
			MethodName: "BuildSchema",
			Handler:    _IdentityServiceV2_BuildSchema_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _IdentityServiceV2_GetSchema_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _IdentityServiceV2_CreateCredential_Handler,
		},
		{
			MethodName: "GetCredentialProof",
			Handler:    _IdentityServiceV2_GetCredentialProof_Handler,
		},
		{
			MethodName: "RevokeCredential",
			Handler:    _IdentityServiceV2_RevokeCredential_Handler,
		},
		{
			MethodName: "CredentialToJson",
			Handler:    _IdentityServiceV2_CredentialToJson_Handler,
		},
		{
			MethodName: "CredentialFromJson",
			Handler:    _IdentityServiceV2_CredentialFromJson_Handler,
		},
		{
			MethodName: "PublishIssuerState",
			Handler:    _IdentityServiceV2_PublishIssuerState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity_v2.proto",
}
