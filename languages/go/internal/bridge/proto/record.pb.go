// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: record.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordTypes int32

const (
	RecordTypes_STRING RecordTypes = 0
	RecordTypes_HEX    RecordTypes = 1
	RecordTypes_JSON   RecordTypes = 2
	RecordTypes_BYTES  RecordTypes = 3
	RecordTypes_FILE   RecordTypes = 4
	RecordTypes_RECORD RecordTypes = 5
	RecordTypes_RAW    RecordTypes = 6
)

// Enum value maps for RecordTypes.
var (
	RecordTypes_name = map[int32]string{
		0: "STRING",
		1: "HEX",
		2: "JSON",
		3: "BYTES",
		4: "FILE",
		5: "RECORD",
		6: "RAW",
	}
	RecordTypes_value = map[string]int32{
		"STRING": 0,
		"HEX":    1,
		"JSON":   2,
		"BYTES":  3,
		"FILE":   4,
		"RECORD": 5,
		"RAW":    6,
	}
)

func (x RecordTypes) Enum() *RecordTypes {
	p := new(RecordTypes)
	*p = x
	return p
}

func (x RecordTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[0].Descriptor()
}

func (RecordTypes) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[0]
}

func (x RecordTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordTypes.Descriptor instead.
func (RecordTypes) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

type SignerAlg int32

const (
	SignerAlg_ES256K SignerAlg = 0
)

// Enum value maps for SignerAlg.
var (
	SignerAlg_name = map[int32]string{
		0: "ES256K",
	}
	SignerAlg_value = map[string]int32{
		"ES256K": 0,
	}
)

func (x SignerAlg) Enum() *SignerAlg {
	p := new(SignerAlg)
	*p = x
	return p
}

func (x SignerAlg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignerAlg) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[1].Descriptor()
}

func (SignerAlg) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[1]
}

func (x SignerAlg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignerAlg.Descriptor instead.
func (SignerAlg) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

type EncryptionAlg int32

const (
	EncryptionAlg_A256GCM EncryptionAlg = 0
)

// Enum value maps for EncryptionAlg.
var (
	EncryptionAlg_name = map[int32]string{
		0: "A256GCM",
	}
	EncryptionAlg_value = map[string]int32{
		"A256GCM": 0,
	}
)

func (x EncryptionAlg) Enum() *EncryptionAlg {
	p := new(EncryptionAlg)
	*p = x
	return p
}

func (x EncryptionAlg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionAlg) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[2].Descriptor()
}

func (EncryptionAlg) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[2]
}

func (x EncryptionAlg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionAlg.Descriptor instead.
func (EncryptionAlg) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

type GenerateKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenerateKeysRequest) Reset() {
	*x = GenerateKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeysRequest) ProtoMessage() {}

func (x *GenerateKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeysRequest.ProtoReflect.Descriptor instead.
func (*GenerateKeysRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

type GenerateKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey string `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	PublicKey  string `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Error      *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *GenerateKeysResponse) Reset() {
	*x = GenerateKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeysResponse) ProtoMessage() {}

func (x *GenerateKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeysResponse.ProtoReflect.Descriptor instead.
func (*GenerateKeysResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateKeysResponse) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *GenerateKeysResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *GenerateKeysResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RecordHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash  string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *RecordHash) Reset() {
	*x = RecordHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordHash) ProtoMessage() {}

func (x *RecordHash) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordHash.ProtoReflect.Descriptor instead.
func (*RecordHash) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

func (x *RecordHash) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *RecordHash) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RecordHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty string `protobuf:"bytes,1,opt,name=ty,proto3" json:"ty,omitempty"`
}

func (x *RecordHeader) Reset() {
	*x = RecordHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordHeader) ProtoMessage() {}

func (x *RecordHeader) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordHeader.ProtoReflect.Descriptor instead.
func (*RecordHeader) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{3}
}

func (x *RecordHeader) GetTy() string {
	if x != nil {
		return x.Ty
	}
	return ""
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers    *RecordHeader `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Payload    []byte        `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Signatures []*Signature  `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Encryption *Encryption   `protobuf:"bytes,4,opt,name=encryption,proto3,oneof" json:"encryption,omitempty"`
	Proof      *Proof        `protobuf:"bytes,5,opt,name=proof,proto3,oneof" json:"proof,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{4}
}

func (x *Record) GetHeaders() *RecordHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Record) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Record) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *Record) GetEncryption() *Encryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *Record) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type Signer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alg  SignerAlg   `protobuf:"varint,1,opt,name=alg,proto3,enum=bloock.SignerAlg" json:"alg,omitempty"`
	Args *SignerArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *Signer) Reset() {
	*x = Signer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signer) ProtoMessage() {}

func (x *Signer) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signer.ProtoReflect.Descriptor instead.
func (*Signer) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{5}
}

func (x *Signer) GetAlg() SignerAlg {
	if x != nil {
		return x.Alg
	}
	return SignerAlg_ES256K
}

func (x *Signer) GetArgs() *SignerArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type SignerArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey *string `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3,oneof" json:"private_key,omitempty"`
}

func (x *SignerArgs) Reset() {
	*x = SignerArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignerArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignerArgs) ProtoMessage() {}

func (x *SignerArgs) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignerArgs.ProtoReflect.Descriptor instead.
func (*SignerArgs) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{6}
}

func (x *SignerArgs) GetPrivateKey() string {
	if x != nil && x.PrivateKey != nil {
		return *x.PrivateKey
	}
	return ""
}

type Encrypter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alg  EncryptionAlg  `protobuf:"varint,1,opt,name=alg,proto3,enum=bloock.EncryptionAlg" json:"alg,omitempty"`
	Args *EncrypterArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *Encrypter) Reset() {
	*x = Encrypter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encrypter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encrypter) ProtoMessage() {}

func (x *Encrypter) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encrypter.ProtoReflect.Descriptor instead.
func (*Encrypter) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{7}
}

func (x *Encrypter) GetAlg() EncryptionAlg {
	if x != nil {
		return x.Alg
	}
	return EncryptionAlg_A256GCM
}

func (x *Encrypter) GetArgs() *EncrypterArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type EncrypterArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *EncrypterArgs) Reset() {
	*x = EncrypterArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncrypterArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncrypterArgs) ProtoMessage() {}

func (x *EncrypterArgs) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncrypterArgs.ProtoReflect.Descriptor instead.
func (*EncrypterArgs) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{8}
}

func (x *EncrypterArgs) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Decrypter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alg  EncryptionAlg  `protobuf:"varint,1,opt,name=alg,proto3,enum=bloock.EncryptionAlg" json:"alg,omitempty"`
	Args *DecrypterArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *Decrypter) Reset() {
	*x = Decrypter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decrypter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decrypter) ProtoMessage() {}

func (x *Decrypter) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decrypter.ProtoReflect.Descriptor instead.
func (*Decrypter) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{9}
}

func (x *Decrypter) GetAlg() EncryptionAlg {
	if x != nil {
		return x.Alg
	}
	return EncryptionAlg_A256GCM
}

func (x *Decrypter) GetArgs() *DecrypterArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type DecrypterArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *DecrypterArgs) Reset() {
	*x = DecrypterArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrypterArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrypterArgs) ProtoMessage() {}

func (x *DecrypterArgs) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrypterArgs.ProtoReflect.Descriptor instead.
func (*DecrypterArgs) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{10}
}

func (x *DecrypterArgs) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature string           `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Protected string           `protobuf:"bytes,2,opt,name=protected,proto3" json:"protected,omitempty"`
	Header    *SignatureHeader `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{11}
}

func (x *Signature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Signature) GetProtected() string {
	if x != nil {
		return x.Protected
	}
	return ""
}

func (x *Signature) GetHeader() *SignatureHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type SignatureHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alg string `protobuf:"bytes,1,opt,name=alg,proto3" json:"alg,omitempty"`
	Kid string `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
}

func (x *SignatureHeader) Reset() {
	*x = SignatureHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHeader) ProtoMessage() {}

func (x *SignatureHeader) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHeader.ProtoReflect.Descriptor instead.
func (*SignatureHeader) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{12}
}

func (x *SignatureHeader) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

func (x *SignatureHeader) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

type Encryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *EncryptionHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Protected  string            `protobuf:"bytes,2,opt,name=protected,proto3" json:"protected,omitempty"`
	Ciphertext []byte            `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Tag        string            `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Encryption) Reset() {
	*x = Encryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encryption) ProtoMessage() {}

func (x *Encryption) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encryption.ProtoReflect.Descriptor instead.
func (*Encryption) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{13}
}

func (x *Encryption) GetHeader() *EncryptionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Encryption) GetProtected() string {
	if x != nil {
		return x.Protected
	}
	return ""
}

func (x *Encryption) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *Encryption) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type EncryptionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alg string `protobuf:"bytes,1,opt,name=alg,proto3" json:"alg,omitempty"`
	Enc string `protobuf:"bytes,2,opt,name=enc,proto3" json:"enc,omitempty"`
	Cty string `protobuf:"bytes,3,opt,name=cty,proto3" json:"cty,omitempty"`
}

func (x *EncryptionHeader) Reset() {
	*x = EncryptionHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionHeader) ProtoMessage() {}

func (x *EncryptionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionHeader.ProtoReflect.Descriptor instead.
func (*EncryptionHeader) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{14}
}

func (x *EncryptionHeader) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

func (x *EncryptionHeader) GetEnc() string {
	if x != nil {
		return x.Enc
	}
	return ""
}

func (x *EncryptionHeader) GetCty() string {
	if x != nil {
		return x.Cty
	}
	return ""
}

type Decryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *DecryptionHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Protected string            `protobuf:"bytes,2,opt,name=protected,proto3" json:"protected,omitempty"`
}

func (x *Decryption) Reset() {
	*x = Decryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decryption) ProtoMessage() {}

func (x *Decryption) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decryption.ProtoReflect.Descriptor instead.
func (*Decryption) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{15}
}

func (x *Decryption) GetHeader() *DecryptionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Decryption) GetProtected() string {
	if x != nil {
		return x.Protected
	}
	return ""
}

type DecryptionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alg string `protobuf:"bytes,1,opt,name=alg,proto3" json:"alg,omitempty"`
}

func (x *DecryptionHeader) Reset() {
	*x = DecryptionHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptionHeader) ProtoMessage() {}

func (x *DecryptionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptionHeader.ProtoReflect.Descriptor instead.
func (*DecryptionHeader) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{16}
}

func (x *DecryptionHeader) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

type RecordReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor int64  `protobuf:"varint,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Client string `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	Record string `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RecordReceipt) Reset() {
	*x = RecordReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordReceipt) ProtoMessage() {}

func (x *RecordReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordReceipt.ProtoReflect.Descriptor instead.
func (*RecordReceipt) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{17}
}

func (x *RecordReceipt) GetAnchor() int64 {
	if x != nil {
		return x.Anchor
	}
	return 0
}

func (x *RecordReceipt) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *RecordReceipt) GetRecord() string {
	if x != nil {
		return x.Record
	}
	return ""
}

func (x *RecordReceipt) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RecordBuilderFromStringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   string     `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signer    *Signer    `protobuf:"bytes,2,opt,name=signer,proto3,oneof" json:"signer,omitempty"`
	Encrypter *Encrypter `protobuf:"bytes,3,opt,name=encrypter,proto3,oneof" json:"encrypter,omitempty"`
	Decrypter *Decrypter `protobuf:"bytes,4,opt,name=decrypter,proto3,oneof" json:"decrypter,omitempty"`
}

func (x *RecordBuilderFromStringRequest) Reset() {
	*x = RecordBuilderFromStringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordBuilderFromStringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordBuilderFromStringRequest) ProtoMessage() {}

func (x *RecordBuilderFromStringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordBuilderFromStringRequest.ProtoReflect.Descriptor instead.
func (*RecordBuilderFromStringRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{18}
}

func (x *RecordBuilderFromStringRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *RecordBuilderFromStringRequest) GetSigner() *Signer {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RecordBuilderFromStringRequest) GetEncrypter() *Encrypter {
	if x != nil {
		return x.Encrypter
	}
	return nil
}

func (x *RecordBuilderFromStringRequest) GetDecrypter() *Decrypter {
	if x != nil {
		return x.Decrypter
	}
	return nil
}

type RecordBuilderFromHexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   string     `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signer    *Signer    `protobuf:"bytes,2,opt,name=signer,proto3,oneof" json:"signer,omitempty"`
	Encrypter *Encrypter `protobuf:"bytes,3,opt,name=encrypter,proto3,oneof" json:"encrypter,omitempty"`
	Decrypter *Decrypter `protobuf:"bytes,4,opt,name=decrypter,proto3,oneof" json:"decrypter,omitempty"`
}

func (x *RecordBuilderFromHexRequest) Reset() {
	*x = RecordBuilderFromHexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordBuilderFromHexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordBuilderFromHexRequest) ProtoMessage() {}

func (x *RecordBuilderFromHexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordBuilderFromHexRequest.ProtoReflect.Descriptor instead.
func (*RecordBuilderFromHexRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{19}
}

func (x *RecordBuilderFromHexRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *RecordBuilderFromHexRequest) GetSigner() *Signer {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RecordBuilderFromHexRequest) GetEncrypter() *Encrypter {
	if x != nil {
		return x.Encrypter
	}
	return nil
}

func (x *RecordBuilderFromHexRequest) GetDecrypter() *Decrypter {
	if x != nil {
		return x.Decrypter
	}
	return nil
}

type RecordBuilderFromJSONRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   string     `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signer    *Signer    `protobuf:"bytes,2,opt,name=signer,proto3,oneof" json:"signer,omitempty"`
	Encrypter *Encrypter `protobuf:"bytes,3,opt,name=encrypter,proto3,oneof" json:"encrypter,omitempty"`
	Decrypter *Decrypter `protobuf:"bytes,4,opt,name=decrypter,proto3,oneof" json:"decrypter,omitempty"`
}

func (x *RecordBuilderFromJSONRequest) Reset() {
	*x = RecordBuilderFromJSONRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordBuilderFromJSONRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordBuilderFromJSONRequest) ProtoMessage() {}

func (x *RecordBuilderFromJSONRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordBuilderFromJSONRequest.ProtoReflect.Descriptor instead.
func (*RecordBuilderFromJSONRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{20}
}

func (x *RecordBuilderFromJSONRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *RecordBuilderFromJSONRequest) GetSigner() *Signer {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RecordBuilderFromJSONRequest) GetEncrypter() *Encrypter {
	if x != nil {
		return x.Encrypter
	}
	return nil
}

func (x *RecordBuilderFromJSONRequest) GetDecrypter() *Decrypter {
	if x != nil {
		return x.Decrypter
	}
	return nil
}

type RecordBuilderFromBytesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   []byte     `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signer    *Signer    `protobuf:"bytes,2,opt,name=signer,proto3,oneof" json:"signer,omitempty"`
	Encrypter *Encrypter `protobuf:"bytes,3,opt,name=encrypter,proto3,oneof" json:"encrypter,omitempty"`
	Decrypter *Decrypter `protobuf:"bytes,4,opt,name=decrypter,proto3,oneof" json:"decrypter,omitempty"`
}

func (x *RecordBuilderFromBytesRequest) Reset() {
	*x = RecordBuilderFromBytesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordBuilderFromBytesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordBuilderFromBytesRequest) ProtoMessage() {}

func (x *RecordBuilderFromBytesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordBuilderFromBytesRequest.ProtoReflect.Descriptor instead.
func (*RecordBuilderFromBytesRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{21}
}

func (x *RecordBuilderFromBytesRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RecordBuilderFromBytesRequest) GetSigner() *Signer {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RecordBuilderFromBytesRequest) GetEncrypter() *Encrypter {
	if x != nil {
		return x.Encrypter
	}
	return nil
}

func (x *RecordBuilderFromBytesRequest) GetDecrypter() *Decrypter {
	if x != nil {
		return x.Decrypter
	}
	return nil
}

type RecordBuilderFromFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   []byte     `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signer    *Signer    `protobuf:"bytes,2,opt,name=signer,proto3,oneof" json:"signer,omitempty"`
	Encrypter *Encrypter `protobuf:"bytes,3,opt,name=encrypter,proto3,oneof" json:"encrypter,omitempty"`
	Decrypter *Decrypter `protobuf:"bytes,4,opt,name=decrypter,proto3,oneof" json:"decrypter,omitempty"`
}

func (x *RecordBuilderFromFileRequest) Reset() {
	*x = RecordBuilderFromFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordBuilderFromFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordBuilderFromFileRequest) ProtoMessage() {}

func (x *RecordBuilderFromFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordBuilderFromFileRequest.ProtoReflect.Descriptor instead.
func (*RecordBuilderFromFileRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{22}
}

func (x *RecordBuilderFromFileRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RecordBuilderFromFileRequest) GetSigner() *Signer {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RecordBuilderFromFileRequest) GetEncrypter() *Encrypter {
	if x != nil {
		return x.Encrypter
	}
	return nil
}

func (x *RecordBuilderFromFileRequest) GetDecrypter() *Decrypter {
	if x != nil {
		return x.Decrypter
	}
	return nil
}

type RecordBuilderFromRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *Record    `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signer    *Signer    `protobuf:"bytes,2,opt,name=signer,proto3,oneof" json:"signer,omitempty"`
	Encrypter *Encrypter `protobuf:"bytes,3,opt,name=encrypter,proto3,oneof" json:"encrypter,omitempty"`
	Decrypter *Decrypter `protobuf:"bytes,4,opt,name=decrypter,proto3,oneof" json:"decrypter,omitempty"`
}

func (x *RecordBuilderFromRecordRequest) Reset() {
	*x = RecordBuilderFromRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordBuilderFromRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordBuilderFromRecordRequest) ProtoMessage() {}

func (x *RecordBuilderFromRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordBuilderFromRecordRequest.ProtoReflect.Descriptor instead.
func (*RecordBuilderFromRecordRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{23}
}

func (x *RecordBuilderFromRecordRequest) GetPayload() *Record {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RecordBuilderFromRecordRequest) GetSigner() *Signer {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RecordBuilderFromRecordRequest) GetEncrypter() *Encrypter {
	if x != nil {
		return x.Encrypter
	}
	return nil
}

func (x *RecordBuilderFromRecordRequest) GetDecrypter() *Decrypter {
	if x != nil {
		return x.Decrypter
	}
	return nil
}

type RecordBuilderFromRawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   string     `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signer    *Signer    `protobuf:"bytes,2,opt,name=signer,proto3,oneof" json:"signer,omitempty"`
	Encrypter *Encrypter `protobuf:"bytes,3,opt,name=encrypter,proto3,oneof" json:"encrypter,omitempty"`
	Decrypter *Decrypter `protobuf:"bytes,4,opt,name=decrypter,proto3,oneof" json:"decrypter,omitempty"`
}

func (x *RecordBuilderFromRawRequest) Reset() {
	*x = RecordBuilderFromRawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordBuilderFromRawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordBuilderFromRawRequest) ProtoMessage() {}

func (x *RecordBuilderFromRawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordBuilderFromRawRequest.ProtoReflect.Descriptor instead.
func (*RecordBuilderFromRawRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{24}
}

func (x *RecordBuilderFromRawRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *RecordBuilderFromRawRequest) GetSigner() *Signer {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RecordBuilderFromRawRequest) GetEncrypter() *Encrypter {
	if x != nil {
		return x.Encrypter
	}
	return nil
}

func (x *RecordBuilderFromRawRequest) GetDecrypter() *Decrypter {
	if x != nil {
		return x.Decrypter
	}
	return nil
}

type RecordBuilderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	Error  *Error  `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *RecordBuilderResponse) Reset() {
	*x = RecordBuilderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordBuilderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordBuilderResponse) ProtoMessage() {}

func (x *RecordBuilderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordBuilderResponse.ProtoReflect.Descriptor instead.
func (*RecordBuilderResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{25}
}

func (x *RecordBuilderResponse) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *RecordBuilderResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SendRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigData *ConfigData `protobuf:"bytes,1,opt,name=config_data,json=configData,proto3" json:"config_data,omitempty"`
	Records    []string    `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *SendRecordsRequest) Reset() {
	*x = SendRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRecordsRequest) ProtoMessage() {}

func (x *SendRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRecordsRequest.ProtoReflect.Descriptor instead.
func (*SendRecordsRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{26}
}

func (x *SendRecordsRequest) GetConfigData() *ConfigData {
	if x != nil {
		return x.ConfigData
	}
	return nil
}

func (x *SendRecordsRequest) GetRecords() []string {
	if x != nil {
		return x.Records
	}
	return nil
}

type SendRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*RecordReceipt `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Error   *Error           `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *SendRecordsResponse) Reset() {
	*x = SendRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRecordsResponse) ProtoMessage() {}

func (x *SendRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRecordsResponse.ProtoReflect.Descriptor instead.
func (*SendRecordsResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{27}
}

func (x *SendRecordsResponse) GetRecords() []*RecordReceipt {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *SendRecordsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_record_proto protoreflect.FileDescriptor

var file_record_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x15, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62,
	0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x54, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1e, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x79, 0x22, 0x81, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b,
	0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x01, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x55, 0x0a, 0x06, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x41, 0x6c, 0x67, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x42, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x5f, 0x0a, 0x09, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x29, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f,
	0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x2b, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x5f, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x2b, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x78, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c,
	0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x0f,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6c,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x22, 0x48, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x74, 0x79, 0x22, 0x5c,
	0x0a, 0x0a, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x24, 0x0a, 0x10,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x6c, 0x67, 0x22, 0x6f, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72,
	0x22, 0xf7, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f,
	0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52,
	0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x1c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c,
	0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x48, 0x02,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x72, 0x22, 0xf9, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b,
	0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x72, 0x22, 0xf8, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x48,
	0x01, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x22, 0x8a, 0x02, 0x0a,
	0x1e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f,
	0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x72, 0x48, 0x02, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x22, 0xf7, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6c, 0x6f, 0x6f,
	0x63, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x7a, 0x0a,
	0x13, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x56, 0x0a, 0x0b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x45, 0x58, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10,
	0x06, 0x2a, 0x17, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x53, 0x32, 0x35, 0x36, 0x4b, 0x10, 0x00, 0x2a, 0x1c, 0x0a, 0x0d, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x32, 0x35, 0x36, 0x47, 0x43, 0x4d, 0x10, 0x00, 0x32, 0xdb, 0x06, 0x0a, 0x0d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x62, 0x6c,
	0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x78, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63,
	0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x53,
	0x4f, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x6f,
	0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x62,
	0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x62, 0x6c,
	0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x61, 0x77, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63,
	0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x12, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x49, 0x0a, 0x0c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x6c,
	0x6f, 0x6f, 0x63, 0x6b, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x6f, 0x63,
	0x6b, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x58, 0x0a, 0x1c, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b, 0x2f, 0x62, 0x6c, 0x6f, 0x6f, 0x63, 0x6b,
	0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_record_proto_rawDescOnce sync.Once
	file_record_proto_rawDescData = file_record_proto_rawDesc
)

func file_record_proto_rawDescGZIP() []byte {
	file_record_proto_rawDescOnce.Do(func() {
		file_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_proto_rawDescData)
	})
	return file_record_proto_rawDescData
}

var file_record_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_record_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_record_proto_goTypes = []interface{}{
	(RecordTypes)(0),                       // 0: bloock.RecordTypes
	(SignerAlg)(0),                         // 1: bloock.SignerAlg
	(EncryptionAlg)(0),                     // 2: bloock.EncryptionAlg
	(*GenerateKeysRequest)(nil),            // 3: bloock.GenerateKeysRequest
	(*GenerateKeysResponse)(nil),           // 4: bloock.GenerateKeysResponse
	(*RecordHash)(nil),                     // 5: bloock.RecordHash
	(*RecordHeader)(nil),                   // 6: bloock.RecordHeader
	(*Record)(nil),                         // 7: bloock.Record
	(*Signer)(nil),                         // 8: bloock.Signer
	(*SignerArgs)(nil),                     // 9: bloock.SignerArgs
	(*Encrypter)(nil),                      // 10: bloock.Encrypter
	(*EncrypterArgs)(nil),                  // 11: bloock.EncrypterArgs
	(*Decrypter)(nil),                      // 12: bloock.Decrypter
	(*DecrypterArgs)(nil),                  // 13: bloock.DecrypterArgs
	(*Signature)(nil),                      // 14: bloock.Signature
	(*SignatureHeader)(nil),                // 15: bloock.SignatureHeader
	(*Encryption)(nil),                     // 16: bloock.Encryption
	(*EncryptionHeader)(nil),               // 17: bloock.EncryptionHeader
	(*Decryption)(nil),                     // 18: bloock.Decryption
	(*DecryptionHeader)(nil),               // 19: bloock.DecryptionHeader
	(*RecordReceipt)(nil),                  // 20: bloock.RecordReceipt
	(*RecordBuilderFromStringRequest)(nil), // 21: bloock.RecordBuilderFromStringRequest
	(*RecordBuilderFromHexRequest)(nil),    // 22: bloock.RecordBuilderFromHexRequest
	(*RecordBuilderFromJSONRequest)(nil),   // 23: bloock.RecordBuilderFromJSONRequest
	(*RecordBuilderFromBytesRequest)(nil),  // 24: bloock.RecordBuilderFromBytesRequest
	(*RecordBuilderFromFileRequest)(nil),   // 25: bloock.RecordBuilderFromFileRequest
	(*RecordBuilderFromRecordRequest)(nil), // 26: bloock.RecordBuilderFromRecordRequest
	(*RecordBuilderFromRawRequest)(nil),    // 27: bloock.RecordBuilderFromRawRequest
	(*RecordBuilderResponse)(nil),          // 28: bloock.RecordBuilderResponse
	(*SendRecordsRequest)(nil),             // 29: bloock.SendRecordsRequest
	(*SendRecordsResponse)(nil),            // 30: bloock.SendRecordsResponse
	(*Error)(nil),                          // 31: bloock.Error
	(*Proof)(nil),                          // 32: bloock.Proof
	(*ConfigData)(nil),                     // 33: bloock.ConfigData
}
var file_record_proto_depIdxs = []int32{
	31, // 0: bloock.GenerateKeysResponse.error:type_name -> bloock.Error
	31, // 1: bloock.RecordHash.error:type_name -> bloock.Error
	6,  // 2: bloock.Record.headers:type_name -> bloock.RecordHeader
	14, // 3: bloock.Record.signatures:type_name -> bloock.Signature
	16, // 4: bloock.Record.encryption:type_name -> bloock.Encryption
	32, // 5: bloock.Record.proof:type_name -> bloock.Proof
	1,  // 6: bloock.Signer.alg:type_name -> bloock.SignerAlg
	9,  // 7: bloock.Signer.args:type_name -> bloock.SignerArgs
	2,  // 8: bloock.Encrypter.alg:type_name -> bloock.EncryptionAlg
	11, // 9: bloock.Encrypter.args:type_name -> bloock.EncrypterArgs
	2,  // 10: bloock.Decrypter.alg:type_name -> bloock.EncryptionAlg
	13, // 11: bloock.Decrypter.args:type_name -> bloock.DecrypterArgs
	15, // 12: bloock.Signature.header:type_name -> bloock.SignatureHeader
	17, // 13: bloock.Encryption.header:type_name -> bloock.EncryptionHeader
	19, // 14: bloock.Decryption.header:type_name -> bloock.DecryptionHeader
	8,  // 15: bloock.RecordBuilderFromStringRequest.signer:type_name -> bloock.Signer
	10, // 16: bloock.RecordBuilderFromStringRequest.encrypter:type_name -> bloock.Encrypter
	12, // 17: bloock.RecordBuilderFromStringRequest.decrypter:type_name -> bloock.Decrypter
	8,  // 18: bloock.RecordBuilderFromHexRequest.signer:type_name -> bloock.Signer
	10, // 19: bloock.RecordBuilderFromHexRequest.encrypter:type_name -> bloock.Encrypter
	12, // 20: bloock.RecordBuilderFromHexRequest.decrypter:type_name -> bloock.Decrypter
	8,  // 21: bloock.RecordBuilderFromJSONRequest.signer:type_name -> bloock.Signer
	10, // 22: bloock.RecordBuilderFromJSONRequest.encrypter:type_name -> bloock.Encrypter
	12, // 23: bloock.RecordBuilderFromJSONRequest.decrypter:type_name -> bloock.Decrypter
	8,  // 24: bloock.RecordBuilderFromBytesRequest.signer:type_name -> bloock.Signer
	10, // 25: bloock.RecordBuilderFromBytesRequest.encrypter:type_name -> bloock.Encrypter
	12, // 26: bloock.RecordBuilderFromBytesRequest.decrypter:type_name -> bloock.Decrypter
	8,  // 27: bloock.RecordBuilderFromFileRequest.signer:type_name -> bloock.Signer
	10, // 28: bloock.RecordBuilderFromFileRequest.encrypter:type_name -> bloock.Encrypter
	12, // 29: bloock.RecordBuilderFromFileRequest.decrypter:type_name -> bloock.Decrypter
	7,  // 30: bloock.RecordBuilderFromRecordRequest.payload:type_name -> bloock.Record
	8,  // 31: bloock.RecordBuilderFromRecordRequest.signer:type_name -> bloock.Signer
	10, // 32: bloock.RecordBuilderFromRecordRequest.encrypter:type_name -> bloock.Encrypter
	12, // 33: bloock.RecordBuilderFromRecordRequest.decrypter:type_name -> bloock.Decrypter
	8,  // 34: bloock.RecordBuilderFromRawRequest.signer:type_name -> bloock.Signer
	10, // 35: bloock.RecordBuilderFromRawRequest.encrypter:type_name -> bloock.Encrypter
	12, // 36: bloock.RecordBuilderFromRawRequest.decrypter:type_name -> bloock.Decrypter
	7,  // 37: bloock.RecordBuilderResponse.record:type_name -> bloock.Record
	31, // 38: bloock.RecordBuilderResponse.error:type_name -> bloock.Error
	33, // 39: bloock.SendRecordsRequest.config_data:type_name -> bloock.ConfigData
	20, // 40: bloock.SendRecordsResponse.records:type_name -> bloock.RecordReceipt
	31, // 41: bloock.SendRecordsResponse.error:type_name -> bloock.Error
	29, // 42: bloock.RecordService.SendRecords:input_type -> bloock.SendRecordsRequest
	21, // 43: bloock.RecordService.BuildRecordFromString:input_type -> bloock.RecordBuilderFromStringRequest
	22, // 44: bloock.RecordService.BuildRecordFromHex:input_type -> bloock.RecordBuilderFromHexRequest
	23, // 45: bloock.RecordService.BuildRecordFromJson:input_type -> bloock.RecordBuilderFromJSONRequest
	25, // 46: bloock.RecordService.BuildRecordFromFile:input_type -> bloock.RecordBuilderFromFileRequest
	24, // 47: bloock.RecordService.BuildRecordFromBytes:input_type -> bloock.RecordBuilderFromBytesRequest
	26, // 48: bloock.RecordService.BuildRecordFromRecord:input_type -> bloock.RecordBuilderFromRecordRequest
	27, // 49: bloock.RecordService.BuildRecordFromRaw:input_type -> bloock.RecordBuilderFromRawRequest
	7,  // 50: bloock.RecordService.GetHash:input_type -> bloock.Record
	3,  // 51: bloock.RecordService.GenerateKeys:input_type -> bloock.GenerateKeysRequest
	30, // 52: bloock.RecordService.SendRecords:output_type -> bloock.SendRecordsResponse
	28, // 53: bloock.RecordService.BuildRecordFromString:output_type -> bloock.RecordBuilderResponse
	28, // 54: bloock.RecordService.BuildRecordFromHex:output_type -> bloock.RecordBuilderResponse
	28, // 55: bloock.RecordService.BuildRecordFromJson:output_type -> bloock.RecordBuilderResponse
	28, // 56: bloock.RecordService.BuildRecordFromFile:output_type -> bloock.RecordBuilderResponse
	28, // 57: bloock.RecordService.BuildRecordFromBytes:output_type -> bloock.RecordBuilderResponse
	28, // 58: bloock.RecordService.BuildRecordFromRecord:output_type -> bloock.RecordBuilderResponse
	28, // 59: bloock.RecordService.BuildRecordFromRaw:output_type -> bloock.RecordBuilderResponse
	5,  // 60: bloock.RecordService.GetHash:output_type -> bloock.RecordHash
	4,  // 61: bloock.RecordService.GenerateKeys:output_type -> bloock.GenerateKeysResponse
	52, // [52:62] is the sub-list for method output_type
	42, // [42:52] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_record_proto_init() }
func file_record_proto_init() {
	if File_record_proto != nil {
		return
	}
	file_shared_proto_init()
	file_config_proto_init()
	file_proof_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignerArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encrypter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncrypterArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decrypter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrypterArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptionHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordBuilderFromStringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordBuilderFromHexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordBuilderFromJSONRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordBuilderFromBytesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordBuilderFromFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordBuilderFromRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordBuilderFromRawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordBuilderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_record_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_record_proto_msgTypes[27].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_record_proto_goTypes,
		DependencyIndexes: file_record_proto_depIdxs,
		EnumInfos:         file_record_proto_enumTypes,
		MessageInfos:      file_record_proto_msgTypes,
	}.Build()
	File_record_proto = out.File
	file_record_proto_rawDesc = nil
	file_record_proto_goTypes = nil
	file_record_proto_depIdxs = nil
}
