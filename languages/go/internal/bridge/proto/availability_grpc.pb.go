// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: availability.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AvailabilityServiceClient is the client API for AvailabilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvailabilityServiceClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error)
}

type availabilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvailabilityServiceClient(cc grpc.ClientConnInterface) AvailabilityServiceClient {
	return &availabilityServiceClient{cc}
}

func (c *availabilityServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/bloock.AvailabilityService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *availabilityServiceClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error) {
	out := new(RetrieveResponse)
	err := c.cc.Invoke(ctx, "/bloock.AvailabilityService/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvailabilityServiceServer is the server API for AvailabilityService service.
// All implementations must embed UnimplementedAvailabilityServiceServer
// for forward compatibility
type AvailabilityServiceServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error)
	mustEmbedUnimplementedAvailabilityServiceServer()
}

// UnimplementedAvailabilityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAvailabilityServiceServer struct {
}

func (UnimplementedAvailabilityServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedAvailabilityServiceServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedAvailabilityServiceServer) mustEmbedUnimplementedAvailabilityServiceServer() {}

// UnsafeAvailabilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvailabilityServiceServer will
// result in compilation errors.
type UnsafeAvailabilityServiceServer interface {
	mustEmbedUnimplementedAvailabilityServiceServer()
}

func RegisterAvailabilityServiceServer(s grpc.ServiceRegistrar, srv AvailabilityServiceServer) {
	s.RegisterService(&AvailabilityService_ServiceDesc, srv)
}

func _AvailabilityService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvailabilityServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.AvailabilityService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvailabilityServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvailabilityService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvailabilityServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloock.AvailabilityService/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvailabilityServiceServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AvailabilityService_ServiceDesc is the grpc.ServiceDesc for AvailabilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvailabilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bloock.AvailabilityService",
	HandlerType: (*AvailabilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _AvailabilityService_Publish_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _AvailabilityService_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "availability.proto",
}
