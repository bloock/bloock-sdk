<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: record_entities.proto

namespace Bloock;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>bloock.AvailabilityDetails</code>
 */
class AvailabilityDetails extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int64 size = 1;</code>
     */
    protected $size = 0;
    /**
     * Generated from protobuf field <code>optional string type = 2;</code>
     */
    protected $type = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $size
     *     @type string $type
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\RecordEntities::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 size = 1;</code>
     * @return int|string
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * Generated from protobuf field <code>int64 size = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSize($var)
    {
        GPBUtil::checkInt64($var);
        $this->size = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional string type = 2;</code>
     * @return string
     */
    public function getType()
    {
        return isset($this->type) ? $this->type : '';
    }

    public function hasType()
    {
        return isset($this->type);
    }

    public function clearType()
    {
        unset($this->type);
    }

    /**
     * Generated from protobuf field <code>optional string type = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, True);
        $this->type = $var;

        return $this;
    }

}

