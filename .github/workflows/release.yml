name: Create Release
on:
  push:
    tags:
      - "v*"
    branches:
      - master
      - feature/EIT-2580

jobs:
  version:
    name: Compute and verify the version number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/check_version
      - name: Set version env
        run: echo "bloock_version=$(cat VERSION)" >> $GITHUB_ENV
      - name: Check github ref matches
        if: startsWith(github.ref, 'refs/tags/')
        env:
          github_ref: ${{ github.ref }}
        run: grep "${github_ref/refs\/tags\/v/}" VERSION

  linux_libs:
    name: Build release libraries on Linux
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/build_linux.yml

  macos_libs:
    name: Build release libraries on MacOS
    runs-on: macos-11
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/build_darwin.yml

  windows_libs:
    name: Build release libraries on Windows
    runs-on: windows-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/build_windows.yml

  build_go:
    name: Build go.
    runs-on: ubuntu-latest
    needs: [linux_libs, macos_libs, windows_libs]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/build_go.yml

  build_js:
    name: Build js.
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/build_js.yml

  validate_go:
    name: Test go ${{ matrix.go-version }} on ${{ matrix.os }}
    needs: [build_go]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/test_go.yml

  validate_js:
    name: Test node ${{ matrix.node-version }} on ${{ matrix.os }}
    needs: [build_js]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/test_js.yml

  release:
    name: Create release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_js, build_go, validate_js, validate_go]
    steps:
      - name: Download bloock dylibs
        uses: actions/download-artifact@v1
        with:
          name: bloock_library
      - name: Zip libraries
        run: zip --junk-paths -r bloock-lib.zip bloock_library/
      - name: Create JS release artifact
        working-directory: bloock_js_node
        run: npm pack
      - name: Download bloock go lib
        uses: actions/download-artifact@v1
        with:
          name: go
      - name: Zip Go source code
        run: zip -r go-bloock.zip go/
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.bloock_version }}
          release_name: bloock ${{ steps.version.outputs.bloock_version }}
          body: |
            bloock ${{ steps.version.outputs.bloock_version }}
          draft: false
          prerelease: true
      - name: Upload Libraries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bloock-lib.zip
          asset_name: bloock-lib-${{ steps.version.outputs.bloock_version }}.zip
          asset_content_type: application/zip
      - name: Upload Js Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bloock_js_node/bloock-${{ steps.version.outputs.bloock_version }}.tgz
          asset_name: bloock-js-node-${{ steps.version.outputs.bloock_version }}.tgz
          asset_content_type: application/gzip
      - name: Upload go package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./go-bloock.zip
          asset_name: go-bloock-${{ steps.version.outputs.bloock_version }}.zip
          asset_content_type: application/zip
  # TODO(gj): update this to post to Quill or a private channel on community Slack.
  alert-failure:
    name: Alert on failure
    if: ${{ !success() }}
    runs-on: ubuntu-latest
    needs: [validate_js, validate_go]
    steps:
      - uses: rtCamp/action-slack-notify@master
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
        env:
          SLACK_CHANNEL: firehose
          SLACK_COLOR: "danger"
          SLACK_MESSAGE: "${{ github.event.head_commit.url }}"
          SLACK_TITLE: "Release job failed."
          SLACK_USERNAME: github-actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_TO_FIREHOSE }}
